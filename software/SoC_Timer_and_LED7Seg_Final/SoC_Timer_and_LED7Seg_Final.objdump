
SoC_Timer_and_LED7Seg_Final.elf:     file format elf32-littlenios2
SoC_Timer_and_LED7Seg_Final.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008230

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002bc8 memsz 0x00002bc8 flags r-x
    LOAD off    0x00003be8 vaddr 0x0000abe8 paddr 0x0000aedc align 2**12
         filesz 0x000002f4 memsz 0x000002f4 flags rw-
    LOAD off    0x000041d0 vaddr 0x0000b1d0 paddr 0x0000b1d0 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000028f8  00008230  00008230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000c0  0000ab28  0000ab28  00003b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002f4  0000abe8  0000aedc  00003be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  0000b1d0  0000b1d0  000041d0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000b328  0000b328  00003edc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003edc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000658  00000000  00000000  00003f00  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000084b0  00000000  00000000  00004558  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e4d  00000000  00000000  0000ca08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003225  00000000  00000000  0000f855  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d60  00000000  00000000  00012a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001f5b  00000000  00000000  000137dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000015da  00000000  00000000  00015737  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00016d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002c0  00000000  00000000  00016d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00018d92  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00018d95  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00018da1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00018da2  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00018da3  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00018dae  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00018db9  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  00018dc4  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000029  00000000  00000000  00018dca  2**0
                  CONTENTS, READONLY
 26 .jdi          0000506d  00000000  00000000  00018df3  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005cb90  00000000  00000000  0001de60  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008230 l    d  .text	00000000 .text
0000ab28 l    d  .rodata	00000000 .rodata
0000abe8 l    d  .rwdata	00000000 .rwdata
0000b1d0 l    d  .bss	00000000 .bss
0000b328 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../SoC_Timer_and_LED7Seg_Final_bsp//obj/HAL/src/crt0.o
00008268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 source.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008b44 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000abf4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
000094d0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00009638 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009774 l     F .text	00000034 alt_dev_reg
0000acd4 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00009a6c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00009b60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009c94 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009cc0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009f1c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000a07c l     F .text	0000003c alt_get_errno
0000a0b8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000b21c g     O .bss	00000004 alt_instruction_exception_handler
000095bc g     F .text	0000007c alt_main
00008a94 g     F .text	00000080 _puts_r
0000b228 g     O .bss	00000100 alt_irq
0000b1d0 g     O .bss	00000004 counter_sec
0000aedc g       *ABS*	00000000 __flash_rwdata_start
0000b1d8 g     O .bss	00000004 counter_hour
00008a48 g     F .text	0000004c printf
000082e0 g     F .text	00000090 Timer_IRQ_Handler
0000b1e8 g     O .bss	00000004 hour1
0000abe8 g     O .rwdata	0000000a segcode
00008594 g     F .text	00000044 continute_timer
0000a528 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
0000aeac g     O .rwdata	00000004 timer_period_5Mhz
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000b208 g     O .bss	00000004 errno
000085d8 g     F .text	00000048 reset_timer
0000b214 g     O .bss	00000004 alt_argv
00012ea8 g       *ABS*	00000000 _gp
0000ad28 g     O .rwdata	00000180 alt_fd_list
0000a54c g     F .text	00000090 alt_find_dev
0000a000 g     F .text	0000007c alt_io_redirect
0000ab28 g       *ABS*	00000000 __DTOR_END__
00008b14 g     F .text	00000014 puts
00009e80 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000098ec g     F .text	000000ec altera_avalon_jtag_uart_read
00008a0c g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000b1ec g     O .bss	00000004 min1
00008950 g     F .text	00000064 .hidden __udivsi3
0000b1e0 g     O .bss	00000004 update_display_flag
0000aecc g     O .rwdata	00000004 alt_max_fd
0000aeb0 g     O .rwdata	00000004 _global_impure_ptr
0000b328 g       *ABS*	00000000 __bss_end
000093e0 g     F .text	000000f0 alt_iic_isr_register
0000a420 g     F .text	00000108 alt_tick
0000b1f0 g     O .bss	00000004 sec1
00009394 g     F .text	0000004c alt_ic_irq_enabled
0000a384 g     F .text	0000009c alt_alarm_stop
0000b20c g     O .bss	00000004 alt_irq_active
000080fc g     F .exceptions	000000d4 alt_irq_handler
0000ad00 g     O .rwdata	00000028 alt_dev_null
00009c74 g     F .text	00000020 alt_dcache_flush_all
0000aedc g       *ABS*	00000000 __ram_rwdata_end
0000aec4 g     O .rwdata	00000008 alt_dev_list
00009674 g     F .text	00000100 write
0000abe8 g       *ABS*	00000000 __ram_rodata_end
00008370 g     F .text	00000088 clear_led_7_segment
000089b4 g     F .text	00000058 .hidden __umodsi3
0000b328 g       *ABS*	00000000 end
0000b1e4 g     O .bss	00000004 previous_switch_state
000081d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0000ab28 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
00009ae4 g     F .text	0000007c alt_avalon_timer_sc_init
0000b1f4 g     O .bss	00000004 current_timer_period
000099d8 g     F .text	00000094 altera_avalon_jtag_uart_write
00008bb0 g     F .text	0000052c ___vfprintf_internal_r
000086c0 g     F .text	000000cc check_switches
0000a964 g     F .text	00000190 __call_exitprocs
00008548 g     F .text	0000004c stop_timer
00008230 g     F .text	0000003c _start
0000b220 g     O .bss	00000004 _alt_tick_rate
0000b224 g     O .bss	00000004 _alt_nticks
000097e0 g     F .text	0000004c alt_sys_init
0000a80c g     F .text	00000158 __register_exitproc
00009208 g     F .text	00000028 .hidden __mulsi3
0000abe8 g       *ABS*	00000000 __ram_rwdata_start
0000ab28 g       *ABS*	00000000 __ram_rodata_start
000083f8 g     F .text	00000150 update_display
0000982c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000a6e4 g     F .text	000000c4 alt_get_fd
0000a7dc g     F .text	00000030 memcmp
0000b328 g       *ABS*	00000000 __alt_stack_base
0000a5dc g     F .text	00000108 alt_find_file
00009cfc g     F .text	000000a4 alt_dev_llist_insert
000090f8 g     F .text	000000b8 __sfvwrite_small_dev
0000b1d4 g     O .bss	00000004 counter_min
0000b1d0 g       *ABS*	00000000 __bss_start
0000878c g     F .text	000000cc main
0000b218 g     O .bss	00000004 alt_envp
0000988c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000b1f8 g     O .bss	00000004 min0
0000aed0 g     O .rwdata	00000004 alt_errno
0000b1fc g     O .bss	00000004 sec0
00008858 g     F .text	00000084 .hidden __divsi3
0000ab28 g       *ABS*	00000000 __CTOR_END__
0000ab28 g       *ABS*	00000000 __flash_rodata_start
0000ab28 g       *ABS*	00000000 __DTOR_LIST__
000097a8 g     F .text	00000038 alt_irq_init
0000a300 g     F .text	00000084 alt_release_fd
0000b1dc g     O .bss	00000004 state_stop
0000a7a8 g     F .text	00000014 atexit
000091b0 g     F .text	00000058 _write_r
0000aeb4 g     O .rwdata	00000004 _impure_ptr
0000b210 g     O .bss	00000004 alt_argc
00009e00 g     F .text	00000060 _do_dtors
0000b200 g     O .bss	00000004 sw
00008020 g       .exceptions	00000000 alt_irq_entry
0000aebc g     O .rwdata	00000008 alt_fs_list
00008620 g     F .text	00000050 increase_speed
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000b204 g     O .bss	00000004 hour0
00009230 g     F .text	00000050 alt_ic_isr_register
0000aedc g       *ABS*	00000000 _edata
0000b328 g       *ABS*	00000000 _end
00008230 g       *ABS*	00000000 __ram_exceptions_end
00009308 g     F .text	0000008c alt_ic_irq_disable
0000a7bc g     F .text	00000020 exit
000088dc g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000aea8 g     O .rwdata	00000004 timer_period_50Mhz
0000aaf4 g     F .text	00000034 _exit
00008b28 g     F .text	0000001c strlen
0000a1a4 g     F .text	0000015c open
00009e60 g     F .text	00000020 alt_icache_flush_all
00008670 g     F .text	00000050 normal_speed
0000aeb8 g     O .rwdata	00000004 alt_priority_mask
00009280 g     F .text	00000088 alt_ic_irq_enable
000090dc g     F .text	0000001c __vfprintf_internal
0000aed4 g     O .rwdata	00000008 alt_alarm_list
00009da0 g     F .text	00000060 _do_ctors
00009b9c g     F .text	000000d8 close
0000826c g     F .text	00000074 timer_Init
00009538 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08608c14 	ori	at,at,33328
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081d00 	call	81d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0fffb17 	ldw	r3,-20(fp)
    8130:	e0bffc17 	ldw	r2,-16(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001426 	beq	r2,zero,818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	00800074 	movhi	r2,1
    8140:	10ac8a04 	addi	r2,r2,-19928
    8144:	e0fffd17 	ldw	r3,-12(fp)
    8148:	180690fa 	slli	r3,r3,3
    814c:	10c5883a 	add	r2,r2,r3
    8150:	10c00017 	ldw	r3,0(r2)
    8154:	00800074 	movhi	r2,1
    8158:	10ac8a04 	addi	r2,r2,-19928
    815c:	e13ffd17 	ldw	r4,-12(fp)
    8160:	200890fa 	slli	r4,r4,3
    8164:	1105883a 	add	r2,r2,r4
    8168:	10800104 	addi	r2,r2,4
    816c:	10800017 	ldw	r2,0(r2)
    8170:	1009883a 	mov	r4,r2
    8174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    817c:	0005313a 	rdctl	r2,ipending
    8180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8184:	e0bfff17 	ldw	r2,-4(fp)
    8188:	00000706 	br	81a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fe106 	br	812c <_gp+0xffff5284>

    active = alt_irq_pending ();
    81a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    81ac:	e0bffb17 	ldw	r2,-20(fp)
    81b0:	103fdb1e 	bne	r2,zero,8120 <_gp+0xffff5278>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81b4:	0001883a 	nop
}
    81b8:	0001883a 	nop
    81bc:	e037883a 	mov	sp,fp
    81c0:	dfc00117 	ldw	ra,4(sp)
    81c4:	df000017 	ldw	fp,0(sp)
    81c8:	dec00204 	addi	sp,sp,8
    81cc:	f800283a 	ret

000081d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81d0:	defffb04 	addi	sp,sp,-20
    81d4:	dfc00415 	stw	ra,16(sp)
    81d8:	df000315 	stw	fp,12(sp)
    81dc:	df000304 	addi	fp,sp,12
    81e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    81e4:	00bfffc4 	movi	r2,-1
    81e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
    81ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81f0:	d0a0dd17 	ldw	r2,-31884(gp)
    81f4:	10000726 	beq	r2,zero,8214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    81f8:	d0a0dd17 	ldw	r2,-31884(gp)
    81fc:	e0fffd17 	ldw	r3,-12(fp)
    8200:	e1bffe17 	ldw	r6,-8(fp)
    8204:	e17fff17 	ldw	r5,-4(fp)
    8208:	1809883a 	mov	r4,r3
    820c:	103ee83a 	callr	r2
    8210:	00000206 	br	821c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    8218:	0005883a 	mov	r2,zero
}
    821c:	e037883a 	mov	sp,fp
    8220:	dfc00117 	ldw	ra,4(sp)
    8224:	df000017 	ldw	fp,0(sp)
    8228:	dec00204 	addi	sp,sp,8
    822c:	f800283a 	ret

Disassembly of section .text:

00008230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    823c:	d68baa14 	ori	gp,gp,11944
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8244:	10ac7414 	ori	r2,r2,45520

    movhi r3, %hi(__bss_end)
    8248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    824c:	18ecca14 	ori	r3,r3,45864

    beq r2, r3, 1f
    8250:	10c00326 	beq	r2,r3,8260 <_start+0x30>

0:
    stw zero, (r2)
    8254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    825c:	10fffd36 	bltu	r2,r3,8254 <_gp+0xffff53ac>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8260:	00095380 	call	9538 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8264:	00095bc0 	call	95bc <alt_main>

00008268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8268:	003fff06 	br	8268 <_gp+0xffff53c0>

0000826c <timer_Init>:
unsigned int previous_switch_state = 0;

unsigned int timer_period_50Mhz = 50000000;
unsigned int timer_period_5Mhz = 5000000;
unsigned int current_timer_period;
void timer_Init(unsigned int period){
    826c:	defffe04 	addi	sp,sp,-8
    8270:	df000115 	stw	fp,4(sp)
    8274:	df000104 	addi	fp,sp,4
    8278:	e13fff15 	stw	r4,-4(fp)
	current_timer_period = period ;
    827c:	e0bfff17 	ldw	r2,-4(fp)
    8280:	d0a0d315 	stw	r2,-31924(gp)
	// Stop Timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    8284:	00c00204 	movi	r3,8
    8288:	00800074 	movhi	r2,1
    828c:	10840104 	addi	r2,r2,4100
    8290:	10c00035 	stwio	r3,0(r2)

	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, period);
    8294:	e0ffff17 	ldw	r3,-4(fp)
    8298:	00800074 	movhi	r2,1
    829c:	10840204 	addi	r2,r2,4104
    82a0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, (period >> 16));
    82a4:	e0bfff17 	ldw	r2,-4(fp)
    82a8:	1004d43a 	srli	r2,r2,16
    82ac:	1007883a 	mov	r3,r2
    82b0:	00800074 	movhi	r2,1
    82b4:	10840304 	addi	r2,r2,4108
    82b8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,
    82bc:	00c001c4 	movi	r3,7
    82c0:	00800074 	movhi	r2,1
    82c4:	10840104 	addi	r2,r2,4100
    82c8:	10c00035 	stwio	r3,0(r2)
									ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | // Continue counting mode
									ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | // Interrupt enable
								ALTERA_AVALON_TIMER_CONTROL_START_MSK);// Start Timer
}
    82cc:	0001883a 	nop
    82d0:	e037883a 	mov	sp,fp
    82d4:	df000017 	ldw	fp,0(sp)
    82d8:	dec00104 	addi	sp,sp,4
    82dc:	f800283a 	ret

000082e0 <Timer_IRQ_Handler>:


void Timer_IRQ_Handler(void* isr_context){
    82e0:	defffe04 	addi	sp,sp,-8
    82e4:	df000115 	stw	fp,4(sp)
    82e8:	df000104 	addi	fp,sp,4
    82ec:	e13fff15 	stw	r4,-4(fp)
    counter_sec++;
    82f0:	d0a0ca17 	ldw	r2,-31960(gp)
    82f4:	10800044 	addi	r2,r2,1
    82f8:	d0a0ca15 	stw	r2,-31960(gp)
    if(counter_sec == 60){
    82fc:	d0a0ca17 	ldw	r2,-31960(gp)
    8300:	10800f18 	cmpnei	r2,r2,60
    8304:	10000f1e 	bne	r2,zero,8344 <Timer_IRQ_Handler+0x64>
        counter_sec = 0;
    8308:	d020ca15 	stw	zero,-31960(gp)
        counter_min++;
    830c:	d0a0cb17 	ldw	r2,-31956(gp)
    8310:	10800044 	addi	r2,r2,1
    8314:	d0a0cb15 	stw	r2,-31956(gp)
        if(counter_min == 60){
    8318:	d0a0cb17 	ldw	r2,-31956(gp)
    831c:	10800f18 	cmpnei	r2,r2,60
    8320:	1000081e 	bne	r2,zero,8344 <Timer_IRQ_Handler+0x64>
            counter_min = 0;
    8324:	d020cb15 	stw	zero,-31956(gp)
            counter_hour++;
    8328:	d0a0cc17 	ldw	r2,-31952(gp)
    832c:	10800044 	addi	r2,r2,1
    8330:	d0a0cc15 	stw	r2,-31952(gp)
            if(counter_hour == 24){
    8334:	d0a0cc17 	ldw	r2,-31952(gp)
    8338:	10800618 	cmpnei	r2,r2,24
    833c:	1000011e 	bne	r2,zero,8344 <Timer_IRQ_Handler+0x64>
                counter_hour = 0;
    8340:	d020cc15 	stw	zero,-31952(gp)
            }
        }
    }
    update_display_flag = 1;
    8344:	00800044 	movi	r2,1
    8348:	d0a0ce15 	stw	r2,-31944(gp)

	// Clear Timer interrupt bit
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE,
    834c:	00c00044 	movi	r3,1
    8350:	00800074 	movhi	r2,1
    8354:	10840004 	addi	r2,r2,4096
    8358:	10c00035 	stwio	r3,0(r2)
								ALTERA_AVALON_TIMER_STATUS_TO_MSK);
}
    835c:	0001883a 	nop
    8360:	e037883a 	mov	sp,fp
    8364:	df000017 	ldw	fp,0(sp)
    8368:	dec00104 	addi	sp,sp,4
    836c:	f800283a 	ret

00008370 <clear_led_7_segment>:
void clear_led_7_segment()
{
    8370:	defffe04 	addi	sp,sp,-8
    8374:	df000115 	stw	fp,4(sp)
    8378:	df000104 	addi	fp,sp,4
	unsigned char clear_led = 0xFF;
    837c:	00bfffc4 	movi	r2,-1
    8380:	e0bfff05 	stb	r2,-4(fp)
		IOWR(HEX0_BASE, 0, clear_led);
    8384:	e0ffff03 	ldbu	r3,-4(fp)
    8388:	00800074 	movhi	r2,1
    838c:	10842004 	addi	r2,r2,4224
    8390:	10c00035 	stwio	r3,0(r2)
		IOWR(HEX1_BASE, 0, clear_led);
    8394:	e0ffff03 	ldbu	r3,-4(fp)
    8398:	00800074 	movhi	r2,1
    839c:	10841c04 	addi	r2,r2,4208
    83a0:	10c00035 	stwio	r3,0(r2)
		IOWR(HEX2_BASE, 0, clear_led);
    83a4:	e0ffff03 	ldbu	r3,-4(fp)
    83a8:	00800074 	movhi	r2,1
    83ac:	10841804 	addi	r2,r2,4192
    83b0:	10c00035 	stwio	r3,0(r2)
		IOWR(HEX3_BASE, 0, clear_led);
    83b4:	e0ffff03 	ldbu	r3,-4(fp)
    83b8:	00800074 	movhi	r2,1
    83bc:	10841404 	addi	r2,r2,4176
    83c0:	10c00035 	stwio	r3,0(r2)
		IOWR(HEX4_BASE, 0, clear_led);
    83c4:	e0ffff03 	ldbu	r3,-4(fp)
    83c8:	00800074 	movhi	r2,1
    83cc:	10840c04 	addi	r2,r2,4144
    83d0:	10c00035 	stwio	r3,0(r2)
		IOWR(HEX5_BASE, 0, clear_led);
    83d4:	e0ffff03 	ldbu	r3,-4(fp)
    83d8:	00800074 	movhi	r2,1
    83dc:	10841004 	addi	r2,r2,4160
    83e0:	10c00035 	stwio	r3,0(r2)
}
    83e4:	0001883a 	nop
    83e8:	e037883a 	mov	sp,fp
    83ec:	df000017 	ldw	fp,0(sp)
    83f0:	dec00104 	addi	sp,sp,4
    83f4:	f800283a 	ret

000083f8 <update_display>:

void update_display()
{
    83f8:	defffd04 	addi	sp,sp,-12
    83fc:	dfc00215 	stw	ra,8(sp)
    8400:	df000115 	stw	fp,4(sp)
    8404:	dc000015 	stw	r16,0(sp)
    8408:	df000104 	addi	fp,sp,4
	*sec0 = segcode[counter_sec%10];
    840c:	d420d517 	ldw	r16,-31916(gp)
    8410:	d0a0ca17 	ldw	r2,-31960(gp)
    8414:	01400284 	movi	r5,10
    8418:	1009883a 	mov	r4,r2
    841c:	00089b40 	call	89b4 <__umodsi3>
    8420:	1007883a 	mov	r3,r2
    8424:	00800074 	movhi	r2,1
    8428:	10aafa04 	addi	r2,r2,-21528
    842c:	10c5883a 	add	r2,r2,r3
    8430:	10800003 	ldbu	r2,0(r2)
    8434:	10803fcc 	andi	r2,r2,255
    8438:	8080000d 	sth	r2,0(r16)
	*sec1 = segcode[counter_sec/10];
    843c:	d420d217 	ldw	r16,-31928(gp)
    8440:	d0a0ca17 	ldw	r2,-31960(gp)
    8444:	01400284 	movi	r5,10
    8448:	1009883a 	mov	r4,r2
    844c:	00089500 	call	8950 <__udivsi3>
    8450:	1007883a 	mov	r3,r2
    8454:	00800074 	movhi	r2,1
    8458:	10aafa04 	addi	r2,r2,-21528
    845c:	10c5883a 	add	r2,r2,r3
    8460:	10800003 	ldbu	r2,0(r2)
    8464:	10803fcc 	andi	r2,r2,255
    8468:	8080000d 	sth	r2,0(r16)
	*min0 = segcode[counter_min%10];
    846c:	d420d417 	ldw	r16,-31920(gp)
    8470:	d0a0cb17 	ldw	r2,-31956(gp)
    8474:	01400284 	movi	r5,10
    8478:	1009883a 	mov	r4,r2
    847c:	00089b40 	call	89b4 <__umodsi3>
    8480:	1007883a 	mov	r3,r2
    8484:	00800074 	movhi	r2,1
    8488:	10aafa04 	addi	r2,r2,-21528
    848c:	10c5883a 	add	r2,r2,r3
    8490:	10800003 	ldbu	r2,0(r2)
    8494:	10803fcc 	andi	r2,r2,255
    8498:	8080000d 	sth	r2,0(r16)
	*min1 = segcode[counter_min/10];
    849c:	d420d117 	ldw	r16,-31932(gp)
    84a0:	d0a0cb17 	ldw	r2,-31956(gp)
    84a4:	01400284 	movi	r5,10
    84a8:	1009883a 	mov	r4,r2
    84ac:	00089500 	call	8950 <__udivsi3>
    84b0:	1007883a 	mov	r3,r2
    84b4:	00800074 	movhi	r2,1
    84b8:	10aafa04 	addi	r2,r2,-21528
    84bc:	10c5883a 	add	r2,r2,r3
    84c0:	10800003 	ldbu	r2,0(r2)
    84c4:	10803fcc 	andi	r2,r2,255
    84c8:	8080000d 	sth	r2,0(r16)
	*hour0 = segcode[counter_hour%10];
    84cc:	d420d717 	ldw	r16,-31908(gp)
    84d0:	d0a0cc17 	ldw	r2,-31952(gp)
    84d4:	01400284 	movi	r5,10
    84d8:	1009883a 	mov	r4,r2
    84dc:	00089b40 	call	89b4 <__umodsi3>
    84e0:	1007883a 	mov	r3,r2
    84e4:	00800074 	movhi	r2,1
    84e8:	10aafa04 	addi	r2,r2,-21528
    84ec:	10c5883a 	add	r2,r2,r3
    84f0:	10800003 	ldbu	r2,0(r2)
    84f4:	10803fcc 	andi	r2,r2,255
    84f8:	8080000d 	sth	r2,0(r16)
	*hour1 = segcode[counter_hour/10];
    84fc:	d420d017 	ldw	r16,-31936(gp)
    8500:	d0a0cc17 	ldw	r2,-31952(gp)
    8504:	01400284 	movi	r5,10
    8508:	1009883a 	mov	r4,r2
    850c:	00089500 	call	8950 <__udivsi3>
    8510:	1007883a 	mov	r3,r2
    8514:	00800074 	movhi	r2,1
    8518:	10aafa04 	addi	r2,r2,-21528
    851c:	10c5883a 	add	r2,r2,r3
    8520:	10800003 	ldbu	r2,0(r2)
    8524:	10803fcc 	andi	r2,r2,255
    8528:	8080000d 	sth	r2,0(r16)
}
    852c:	0001883a 	nop
    8530:	e6ffff04 	addi	sp,fp,-4
    8534:	dfc00217 	ldw	ra,8(sp)
    8538:	df000117 	ldw	fp,4(sp)
    853c:	dc000017 	ldw	r16,0(sp)
    8540:	dec00304 	addi	sp,sp,12
    8544:	f800283a 	ret

00008548 <stop_timer>:

// Stop Timer
void stop_timer() {
    8548:	defffe04 	addi	sp,sp,-8
    854c:	dfc00115 	stw	ra,4(sp)
    8550:	df000015 	stw	fp,0(sp)
    8554:	d839883a 	mov	fp,sp
    // Stop Timer
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    8558:	00c00204 	movi	r3,8
    855c:	00800074 	movhi	r2,1
    8560:	10840104 	addi	r2,r2,4100
    8564:	10c00035 	stwio	r3,0(r2)
    state_stop = 1;
    8568:	00800044 	movi	r2,1
    856c:	d0a0cd15 	stw	r2,-31948(gp)
    printf("Timer stopped.\n");
    8570:	01000074 	movhi	r4,1
    8574:	212aca04 	addi	r4,r4,-21720
    8578:	0008b140 	call	8b14 <puts>
}
    857c:	0001883a 	nop
    8580:	e037883a 	mov	sp,fp
    8584:	dfc00117 	ldw	ra,4(sp)
    8588:	df000017 	ldw	fp,0(sp)
    858c:	dec00204 	addi	sp,sp,8
    8590:	f800283a 	ret

00008594 <continute_timer>:

// Continute Timer
void continute_timer() {
    8594:	defffe04 	addi	sp,sp,-8
    8598:	dfc00115 	stw	ra,4(sp)
    859c:	df000015 	stw	fp,0(sp)
    85a0:	d839883a 	mov	fp,sp
	timer_Init(current_timer_period);
    85a4:	d0a0d317 	ldw	r2,-31924(gp)
    85a8:	1009883a 	mov	r4,r2
    85ac:	000826c0 	call	826c <timer_Init>
	state_stop = 0;
    85b0:	d020cd15 	stw	zero,-31948(gp)
    printf("Timer continute.\n");
    85b4:	01000074 	movhi	r4,1
    85b8:	212ace04 	addi	r4,r4,-21704
    85bc:	0008b140 	call	8b14 <puts>
}
    85c0:	0001883a 	nop
    85c4:	e037883a 	mov	sp,fp
    85c8:	dfc00117 	ldw	ra,4(sp)
    85cc:	df000017 	ldw	fp,0(sp)
    85d0:	dec00204 	addi	sp,sp,8
    85d4:	f800283a 	ret

000085d8 <reset_timer>:

// Reset Timer and Counters
void reset_timer() {
    85d8:	defffe04 	addi	sp,sp,-8
    85dc:	dfc00115 	stw	ra,4(sp)
    85e0:	df000015 	stw	fp,0(sp)
    85e4:	d839883a 	mov	fp,sp
    counter_sec = 0;
    85e8:	d020ca15 	stw	zero,-31960(gp)
    counter_min = 0;
    85ec:	d020cb15 	stw	zero,-31956(gp)
    counter_hour = 0;
    85f0:	d020cc15 	stw	zero,-31952(gp)
    update_display_flag = 1; // Force update display after reset
    85f4:	00800044 	movi	r2,1
    85f8:	d0a0ce15 	stw	r2,-31944(gp)
    printf("Timer reset.\n");
    85fc:	01000074 	movhi	r4,1
    8600:	212ad304 	addi	r4,r4,-21684
    8604:	0008b140 	call	8b14 <puts>
}
    8608:	0001883a 	nop
    860c:	e037883a 	mov	sp,fp
    8610:	dfc00117 	ldw	ra,4(sp)
    8614:	df000017 	ldw	fp,0(sp)
    8618:	dec00204 	addi	sp,sp,8
    861c:	f800283a 	ret

00008620 <increase_speed>:

// Increase speed by reducing timer period
void increase_speed() {
    8620:	defffe04 	addi	sp,sp,-8
    8624:	dfc00115 	stw	ra,4(sp)
    8628:	df000015 	stw	fp,0(sp)
    862c:	d839883a 	mov	fp,sp
	current_timer_period = timer_period_5Mhz;
    8630:	d0a00117 	ldw	r2,-32764(gp)
    8634:	d0a0d315 	stw	r2,-31924(gp)
	if(!state_stop) timer_Init(current_timer_period);
    8638:	d0a0cd17 	ldw	r2,-31948(gp)
    863c:	1000031e 	bne	r2,zero,864c <increase_speed+0x2c>
    8640:	d0a0d317 	ldw	r2,-31924(gp)
    8644:	1009883a 	mov	r4,r2
    8648:	000826c0 	call	826c <timer_Init>
    printf("Speed increased 10x.\n");
    864c:	01000074 	movhi	r4,1
    8650:	212ad704 	addi	r4,r4,-21668
    8654:	0008b140 	call	8b14 <puts>
}
    8658:	0001883a 	nop
    865c:	e037883a 	mov	sp,fp
    8660:	dfc00117 	ldw	ra,4(sp)
    8664:	df000017 	ldw	fp,0(sp)
    8668:	dec00204 	addi	sp,sp,8
    866c:	f800283a 	ret

00008670 <normal_speed>:
// Increase speed by reducing timer period
void normal_speed() {
    8670:	defffe04 	addi	sp,sp,-8
    8674:	dfc00115 	stw	ra,4(sp)
    8678:	df000015 	stw	fp,0(sp)
    867c:	d839883a 	mov	fp,sp
	current_timer_period = timer_period_50Mhz;
    8680:	d0a00017 	ldw	r2,-32768(gp)
    8684:	d0a0d315 	stw	r2,-31924(gp)
	if(!state_stop) timer_Init(current_timer_period);
    8688:	d0a0cd17 	ldw	r2,-31948(gp)
    868c:	1000031e 	bne	r2,zero,869c <normal_speed+0x2c>
    8690:	d0a0d317 	ldw	r2,-31924(gp)
    8694:	1009883a 	mov	r4,r2
    8698:	000826c0 	call	826c <timer_Init>
    printf("Speed back normaly 50Mhz.\n");
    869c:	01000074 	movhi	r4,1
    86a0:	212add04 	addi	r4,r4,-21644
    86a4:	0008b140 	call	8b14 <puts>
}
    86a8:	0001883a 	nop
    86ac:	e037883a 	mov	sp,fp
    86b0:	dfc00117 	ldw	ra,4(sp)
    86b4:	df000017 	ldw	fp,0(sp)
    86b8:	dec00204 	addi	sp,sp,8
    86bc:	f800283a 	ret

000086c0 <check_switches>:

// Check Switch states and perform actions
void check_switches() {
    86c0:	defffd04 	addi	sp,sp,-12
    86c4:	dfc00215 	stw	ra,8(sp)
    86c8:	df000115 	stw	fp,4(sp)
    86cc:	df000104 	addi	fp,sp,4
    unsigned int switch_state = *sw; // Read the current state of the switches
    86d0:	d0a0d617 	ldw	r2,-31912(gp)
    86d4:	1080000b 	ldhu	r2,0(r2)
    86d8:	10bfffcc 	andi	r2,r2,65535
    86dc:	e0bfff15 	stw	r2,-4(fp)

    // Detect rising edge for each switch
    if ((switch_state & 0x1) && !(previous_switch_state & 0x1)) {
    86e0:	e0bfff17 	ldw	r2,-4(fp)
    86e4:	1080004c 	andi	r2,r2,1
    86e8:	10000426 	beq	r2,zero,86fc <check_switches+0x3c>
    86ec:	d0a0cf17 	ldw	r2,-31940(gp)
    86f0:	1080004c 	andi	r2,r2,1
    86f4:	1000011e 	bne	r2,zero,86fc <check_switches+0x3c>
        // Rising edge of SW0: Reset the timer
        reset_timer();
    86f8:	00085d80 	call	85d8 <reset_timer>
    }

    if ((switch_state & 0x2) && !(previous_switch_state & 0x2)) {
    86fc:	e0bfff17 	ldw	r2,-4(fp)
    8700:	1080008c 	andi	r2,r2,2
    8704:	10000426 	beq	r2,zero,8718 <check_switches+0x58>
    8708:	d0a0cf17 	ldw	r2,-31940(gp)
    870c:	1080008c 	andi	r2,r2,2
    8710:	1000011e 	bne	r2,zero,8718 <check_switches+0x58>
        // Rising edge of SW1: Stop the timer
        stop_timer();
    8714:	00085480 	call	8548 <stop_timer>
    }

    if ((switch_state & 0x4) && !(previous_switch_state & 0x4)) {
    8718:	e0bfff17 	ldw	r2,-4(fp)
    871c:	1080010c 	andi	r2,r2,4
    8720:	10000426 	beq	r2,zero,8734 <check_switches+0x74>
    8724:	d0a0cf17 	ldw	r2,-31940(gp)
    8728:	1080010c 	andi	r2,r2,4
    872c:	1000011e 	bne	r2,zero,8734 <check_switches+0x74>
        // Rising edge of SW2: Increase timer speed
        increase_speed();
    8730:	00086200 	call	8620 <increase_speed>
    }


    // Detect falling edge for each switch
    if (!(switch_state & 0x2) && (previous_switch_state & 0x2)) {
    8734:	e0bfff17 	ldw	r2,-4(fp)
    8738:	1080008c 	andi	r2,r2,2
    873c:	1000041e 	bne	r2,zero,8750 <check_switches+0x90>
    8740:	d0a0cf17 	ldw	r2,-31940(gp)
    8744:	1080008c 	andi	r2,r2,2
    8748:	10000126 	beq	r2,zero,8750 <check_switches+0x90>
        // Falling edge of SW1: Continue the timer
        continute_timer();
    874c:	00085940 	call	8594 <continute_timer>
    }

    if (!(switch_state & 0x4) && (previous_switch_state & 0x4)) {
    8750:	e0bfff17 	ldw	r2,-4(fp)
    8754:	1080010c 	andi	r2,r2,4
    8758:	1000041e 	bne	r2,zero,876c <check_switches+0xac>
    875c:	d0a0cf17 	ldw	r2,-31940(gp)
    8760:	1080010c 	andi	r2,r2,4
    8764:	10000126 	beq	r2,zero,876c <check_switches+0xac>
        // Falling edge of SW2: Restore timer speed to normal
        normal_speed();
    8768:	00086700 	call	8670 <normal_speed>
    }

    // Update the previous switch state for the next iteration
    previous_switch_state = switch_state;
    876c:	e0bfff17 	ldw	r2,-4(fp)
    8770:	d0a0cf15 	stw	r2,-31940(gp)
}
    8774:	0001883a 	nop
    8778:	e037883a 	mov	sp,fp
    877c:	dfc00117 	ldw	ra,4(sp)
    8780:	df000017 	ldw	fp,0(sp)
    8784:	dec00204 	addi	sp,sp,8
    8788:	f800283a 	ret

0000878c <main>:

int main(){
    878c:	defffd04 	addi	sp,sp,-12
    8790:	dfc00215 	stw	ra,8(sp)
    8794:	df000115 	stw	fp,4(sp)
    8798:	df000104 	addi	fp,sp,4
	//Initialize pointers
	sec0 = (unsigned short *)HEX0_BASE;
    879c:	00800074 	movhi	r2,1
    87a0:	10842004 	addi	r2,r2,4224
    87a4:	d0a0d515 	stw	r2,-31916(gp)
	sec1 = (unsigned short *)HEX1_BASE;
    87a8:	00800074 	movhi	r2,1
    87ac:	10841c04 	addi	r2,r2,4208
    87b0:	d0a0d215 	stw	r2,-31928(gp)
	min0 = (unsigned short *)HEX2_BASE;
    87b4:	00800074 	movhi	r2,1
    87b8:	10841804 	addi	r2,r2,4192
    87bc:	d0a0d415 	stw	r2,-31920(gp)
	min1 = (unsigned short *)HEX3_BASE;
    87c0:	00800074 	movhi	r2,1
    87c4:	10841404 	addi	r2,r2,4176
    87c8:	d0a0d115 	stw	r2,-31932(gp)
	hour0 = (unsigned short *)HEX4_BASE;
    87cc:	00800074 	movhi	r2,1
    87d0:	10840c04 	addi	r2,r2,4144
    87d4:	d0a0d715 	stw	r2,-31908(gp)
	hour1 = (unsigned short *)HEX5_BASE;
    87d8:	00800074 	movhi	r2,1
    87dc:	10841004 	addi	r2,r2,4160
    87e0:	d0a0d015 	stw	r2,-31936(gp)
	sw = (unsigned short *) SW_BASE;
    87e4:	00800074 	movhi	r2,1
    87e8:	10840804 	addi	r2,r2,4128
    87ec:	d0a0d615 	stw	r2,-31912(gp)
	//Init for timer
	timer_Init(timer_period_50Mhz);
    87f0:	d0a00017 	ldw	r2,-32768(gp)
    87f4:	1009883a 	mov	r4,r2
    87f8:	000826c0 	call	826c <timer_Init>
	alt_ic_isr_register(0, TIMER_0_IRQ, Timer_IRQ_Handler, (void*)0,(void*)0);
    87fc:	d8000015 	stw	zero,0(sp)
    8800:	000f883a 	mov	r7,zero
    8804:	01800074 	movhi	r6,1
    8808:	31a0b804 	addi	r6,r6,-32032
    880c:	01400044 	movi	r5,1
    8810:	0009883a 	mov	r4,zero
    8814:	00092300 	call	9230 <alt_ic_isr_register>
	//clear led 7 segment
	clear_led_7_segment();
    8818:	00083700 	call	8370 <clear_led_7_segment>

	//More function
	while(1)
	{
		check_switches();
    881c:	00086c00 	call	86c0 <check_switches>
		if(update_display_flag)
    8820:	d0a0ce17 	ldw	r2,-31944(gp)
    8824:	103ffd26 	beq	r2,zero,881c <_gp+0xffff5974>
		{
			update_display();
    8828:	00083f80 	call	83f8 <update_display>
			printf("Real time: %2d : %2d : %2d \n", counter_hour,counter_min,counter_sec);
    882c:	d0a0cc17 	ldw	r2,-31952(gp)
    8830:	d0e0cb17 	ldw	r3,-31956(gp)
    8834:	d120ca17 	ldw	r4,-31960(gp)
    8838:	200f883a 	mov	r7,r4
    883c:	180d883a 	mov	r6,r3
    8840:	100b883a 	mov	r5,r2
    8844:	01000074 	movhi	r4,1
    8848:	212ae404 	addi	r4,r4,-21616
    884c:	0008a480 	call	8a48 <printf>
			update_display_flag = 0;
    8850:	d020ce15 	stw	zero,-31944(gp)
		}
	}
    8854:	003ff106 	br	881c <_gp+0xffff5974>

00008858 <__divsi3>:
    8858:	20001b16 	blt	r4,zero,88c8 <__divsi3+0x70>
    885c:	000f883a 	mov	r7,zero
    8860:	28001616 	blt	r5,zero,88bc <__divsi3+0x64>
    8864:	200d883a 	mov	r6,r4
    8868:	29001a2e 	bgeu	r5,r4,88d4 <__divsi3+0x7c>
    886c:	00800804 	movi	r2,32
    8870:	00c00044 	movi	r3,1
    8874:	00000106 	br	887c <__divsi3+0x24>
    8878:	10000d26 	beq	r2,zero,88b0 <__divsi3+0x58>
    887c:	294b883a 	add	r5,r5,r5
    8880:	10bfffc4 	addi	r2,r2,-1
    8884:	18c7883a 	add	r3,r3,r3
    8888:	293ffb36 	bltu	r5,r4,8878 <_gp+0xffff59d0>
    888c:	0005883a 	mov	r2,zero
    8890:	18000726 	beq	r3,zero,88b0 <__divsi3+0x58>
    8894:	0005883a 	mov	r2,zero
    8898:	31400236 	bltu	r6,r5,88a4 <__divsi3+0x4c>
    889c:	314dc83a 	sub	r6,r6,r5
    88a0:	10c4b03a 	or	r2,r2,r3
    88a4:	1806d07a 	srli	r3,r3,1
    88a8:	280ad07a 	srli	r5,r5,1
    88ac:	183ffa1e 	bne	r3,zero,8898 <_gp+0xffff59f0>
    88b0:	38000126 	beq	r7,zero,88b8 <__divsi3+0x60>
    88b4:	0085c83a 	sub	r2,zero,r2
    88b8:	f800283a 	ret
    88bc:	014bc83a 	sub	r5,zero,r5
    88c0:	39c0005c 	xori	r7,r7,1
    88c4:	003fe706 	br	8864 <_gp+0xffff59bc>
    88c8:	0109c83a 	sub	r4,zero,r4
    88cc:	01c00044 	movi	r7,1
    88d0:	003fe306 	br	8860 <_gp+0xffff59b8>
    88d4:	00c00044 	movi	r3,1
    88d8:	003fee06 	br	8894 <_gp+0xffff59ec>

000088dc <__modsi3>:
    88dc:	20001716 	blt	r4,zero,893c <__modsi3+0x60>
    88e0:	000f883a 	mov	r7,zero
    88e4:	2005883a 	mov	r2,r4
    88e8:	28001216 	blt	r5,zero,8934 <__modsi3+0x58>
    88ec:	2900162e 	bgeu	r5,r4,8948 <__modsi3+0x6c>
    88f0:	01800804 	movi	r6,32
    88f4:	00c00044 	movi	r3,1
    88f8:	00000106 	br	8900 <__modsi3+0x24>
    88fc:	30000a26 	beq	r6,zero,8928 <__modsi3+0x4c>
    8900:	294b883a 	add	r5,r5,r5
    8904:	31bfffc4 	addi	r6,r6,-1
    8908:	18c7883a 	add	r3,r3,r3
    890c:	293ffb36 	bltu	r5,r4,88fc <_gp+0xffff5a54>
    8910:	18000526 	beq	r3,zero,8928 <__modsi3+0x4c>
    8914:	1806d07a 	srli	r3,r3,1
    8918:	11400136 	bltu	r2,r5,8920 <__modsi3+0x44>
    891c:	1145c83a 	sub	r2,r2,r5
    8920:	280ad07a 	srli	r5,r5,1
    8924:	183ffb1e 	bne	r3,zero,8914 <_gp+0xffff5a6c>
    8928:	38000126 	beq	r7,zero,8930 <__modsi3+0x54>
    892c:	0085c83a 	sub	r2,zero,r2
    8930:	f800283a 	ret
    8934:	014bc83a 	sub	r5,zero,r5
    8938:	003fec06 	br	88ec <_gp+0xffff5a44>
    893c:	0109c83a 	sub	r4,zero,r4
    8940:	01c00044 	movi	r7,1
    8944:	003fe706 	br	88e4 <_gp+0xffff5a3c>
    8948:	00c00044 	movi	r3,1
    894c:	003ff106 	br	8914 <_gp+0xffff5a6c>

00008950 <__udivsi3>:
    8950:	200d883a 	mov	r6,r4
    8954:	2900152e 	bgeu	r5,r4,89ac <__udivsi3+0x5c>
    8958:	28001416 	blt	r5,zero,89ac <__udivsi3+0x5c>
    895c:	00800804 	movi	r2,32
    8960:	00c00044 	movi	r3,1
    8964:	00000206 	br	8970 <__udivsi3+0x20>
    8968:	10000e26 	beq	r2,zero,89a4 <__udivsi3+0x54>
    896c:	28000516 	blt	r5,zero,8984 <__udivsi3+0x34>
    8970:	294b883a 	add	r5,r5,r5
    8974:	10bfffc4 	addi	r2,r2,-1
    8978:	18c7883a 	add	r3,r3,r3
    897c:	293ffa36 	bltu	r5,r4,8968 <_gp+0xffff5ac0>
    8980:	18000826 	beq	r3,zero,89a4 <__udivsi3+0x54>
    8984:	0005883a 	mov	r2,zero
    8988:	31400236 	bltu	r6,r5,8994 <__udivsi3+0x44>
    898c:	314dc83a 	sub	r6,r6,r5
    8990:	10c4b03a 	or	r2,r2,r3
    8994:	1806d07a 	srli	r3,r3,1
    8998:	280ad07a 	srli	r5,r5,1
    899c:	183ffa1e 	bne	r3,zero,8988 <_gp+0xffff5ae0>
    89a0:	f800283a 	ret
    89a4:	0005883a 	mov	r2,zero
    89a8:	f800283a 	ret
    89ac:	00c00044 	movi	r3,1
    89b0:	003ff406 	br	8984 <_gp+0xffff5adc>

000089b4 <__umodsi3>:
    89b4:	2005883a 	mov	r2,r4
    89b8:	2900122e 	bgeu	r5,r4,8a04 <__umodsi3+0x50>
    89bc:	28001116 	blt	r5,zero,8a04 <__umodsi3+0x50>
    89c0:	01800804 	movi	r6,32
    89c4:	00c00044 	movi	r3,1
    89c8:	00000206 	br	89d4 <__umodsi3+0x20>
    89cc:	30000c26 	beq	r6,zero,8a00 <__umodsi3+0x4c>
    89d0:	28000516 	blt	r5,zero,89e8 <__umodsi3+0x34>
    89d4:	294b883a 	add	r5,r5,r5
    89d8:	31bfffc4 	addi	r6,r6,-1
    89dc:	18c7883a 	add	r3,r3,r3
    89e0:	293ffa36 	bltu	r5,r4,89cc <_gp+0xffff5b24>
    89e4:	18000626 	beq	r3,zero,8a00 <__umodsi3+0x4c>
    89e8:	1806d07a 	srli	r3,r3,1
    89ec:	11400136 	bltu	r2,r5,89f4 <__umodsi3+0x40>
    89f0:	1145c83a 	sub	r2,r2,r5
    89f4:	280ad07a 	srli	r5,r5,1
    89f8:	183ffb1e 	bne	r3,zero,89e8 <_gp+0xffff5b40>
    89fc:	f800283a 	ret
    8a00:	f800283a 	ret
    8a04:	00c00044 	movi	r3,1
    8a08:	003ff706 	br	89e8 <_gp+0xffff5b40>

00008a0c <_printf_r>:
    8a0c:	defffd04 	addi	sp,sp,-12
    8a10:	dfc00015 	stw	ra,0(sp)
    8a14:	d9800115 	stw	r6,4(sp)
    8a18:	d9c00215 	stw	r7,8(sp)
    8a1c:	20c00217 	ldw	r3,8(r4)
    8a20:	01800074 	movhi	r6,1
    8a24:	31a43e04 	addi	r6,r6,-28424
    8a28:	19800115 	stw	r6,4(r3)
    8a2c:	280d883a 	mov	r6,r5
    8a30:	21400217 	ldw	r5,8(r4)
    8a34:	d9c00104 	addi	r7,sp,4
    8a38:	0008bb00 	call	8bb0 <___vfprintf_internal_r>
    8a3c:	dfc00017 	ldw	ra,0(sp)
    8a40:	dec00304 	addi	sp,sp,12
    8a44:	f800283a 	ret

00008a48 <printf>:
    8a48:	defffc04 	addi	sp,sp,-16
    8a4c:	dfc00015 	stw	ra,0(sp)
    8a50:	d9400115 	stw	r5,4(sp)
    8a54:	d9800215 	stw	r6,8(sp)
    8a58:	d9c00315 	stw	r7,12(sp)
    8a5c:	00800074 	movhi	r2,1
    8a60:	10abad04 	addi	r2,r2,-20812
    8a64:	10800017 	ldw	r2,0(r2)
    8a68:	01400074 	movhi	r5,1
    8a6c:	29643e04 	addi	r5,r5,-28424
    8a70:	10c00217 	ldw	r3,8(r2)
    8a74:	d9800104 	addi	r6,sp,4
    8a78:	19400115 	stw	r5,4(r3)
    8a7c:	200b883a 	mov	r5,r4
    8a80:	11000217 	ldw	r4,8(r2)
    8a84:	00090dc0 	call	90dc <__vfprintf_internal>
    8a88:	dfc00017 	ldw	ra,0(sp)
    8a8c:	dec00404 	addi	sp,sp,16
    8a90:	f800283a 	ret

00008a94 <_puts_r>:
    8a94:	defffd04 	addi	sp,sp,-12
    8a98:	dc000015 	stw	r16,0(sp)
    8a9c:	2021883a 	mov	r16,r4
    8aa0:	2809883a 	mov	r4,r5
    8aa4:	dfc00215 	stw	ra,8(sp)
    8aa8:	dc400115 	stw	r17,4(sp)
    8aac:	2823883a 	mov	r17,r5
    8ab0:	0008b280 	call	8b28 <strlen>
    8ab4:	81400217 	ldw	r5,8(r16)
    8ab8:	01000074 	movhi	r4,1
    8abc:	21243e04 	addi	r4,r4,-28424
    8ac0:	29000115 	stw	r4,4(r5)
    8ac4:	100f883a 	mov	r7,r2
    8ac8:	880d883a 	mov	r6,r17
    8acc:	8009883a 	mov	r4,r16
    8ad0:	00090f80 	call	90f8 <__sfvwrite_small_dev>
    8ad4:	00ffffc4 	movi	r3,-1
    8ad8:	10c00926 	beq	r2,r3,8b00 <_puts_r+0x6c>
    8adc:	81400217 	ldw	r5,8(r16)
    8ae0:	01800074 	movhi	r6,1
    8ae4:	01c00044 	movi	r7,1
    8ae8:	28800117 	ldw	r2,4(r5)
    8aec:	31aaec04 	addi	r6,r6,-21584
    8af0:	8009883a 	mov	r4,r16
    8af4:	103ee83a 	callr	r2
    8af8:	10bfffe0 	cmpeqi	r2,r2,-1
    8afc:	0085c83a 	sub	r2,zero,r2
    8b00:	dfc00217 	ldw	ra,8(sp)
    8b04:	dc400117 	ldw	r17,4(sp)
    8b08:	dc000017 	ldw	r16,0(sp)
    8b0c:	dec00304 	addi	sp,sp,12
    8b10:	f800283a 	ret

00008b14 <puts>:
    8b14:	00800074 	movhi	r2,1
    8b18:	10abad04 	addi	r2,r2,-20812
    8b1c:	200b883a 	mov	r5,r4
    8b20:	11000017 	ldw	r4,0(r2)
    8b24:	0008a941 	jmpi	8a94 <_puts_r>

00008b28 <strlen>:
    8b28:	2005883a 	mov	r2,r4
    8b2c:	10c00007 	ldb	r3,0(r2)
    8b30:	18000226 	beq	r3,zero,8b3c <strlen+0x14>
    8b34:	10800044 	addi	r2,r2,1
    8b38:	003ffc06 	br	8b2c <_gp+0xffff5c84>
    8b3c:	1105c83a 	sub	r2,r2,r4
    8b40:	f800283a 	ret

00008b44 <print_repeat>:
    8b44:	defffb04 	addi	sp,sp,-20
    8b48:	dc800315 	stw	r18,12(sp)
    8b4c:	dc400215 	stw	r17,8(sp)
    8b50:	dc000115 	stw	r16,4(sp)
    8b54:	dfc00415 	stw	ra,16(sp)
    8b58:	2025883a 	mov	r18,r4
    8b5c:	2823883a 	mov	r17,r5
    8b60:	d9800005 	stb	r6,0(sp)
    8b64:	3821883a 	mov	r16,r7
    8b68:	04000a0e 	bge	zero,r16,8b94 <print_repeat+0x50>
    8b6c:	88800117 	ldw	r2,4(r17)
    8b70:	01c00044 	movi	r7,1
    8b74:	d80d883a 	mov	r6,sp
    8b78:	880b883a 	mov	r5,r17
    8b7c:	9009883a 	mov	r4,r18
    8b80:	103ee83a 	callr	r2
    8b84:	843fffc4 	addi	r16,r16,-1
    8b88:	103ff726 	beq	r2,zero,8b68 <_gp+0xffff5cc0>
    8b8c:	00bfffc4 	movi	r2,-1
    8b90:	00000106 	br	8b98 <print_repeat+0x54>
    8b94:	0005883a 	mov	r2,zero
    8b98:	dfc00417 	ldw	ra,16(sp)
    8b9c:	dc800317 	ldw	r18,12(sp)
    8ba0:	dc400217 	ldw	r17,8(sp)
    8ba4:	dc000117 	ldw	r16,4(sp)
    8ba8:	dec00504 	addi	sp,sp,20
    8bac:	f800283a 	ret

00008bb0 <___vfprintf_internal_r>:
    8bb0:	deffe504 	addi	sp,sp,-108
    8bb4:	d8c00804 	addi	r3,sp,32
    8bb8:	ddc01815 	stw	r23,96(sp)
    8bbc:	dd801715 	stw	r22,92(sp)
    8bc0:	dd401615 	stw	r21,88(sp)
    8bc4:	dd001515 	stw	r20,84(sp)
    8bc8:	dcc01415 	stw	r19,80(sp)
    8bcc:	dc801315 	stw	r18,76(sp)
    8bd0:	dc401215 	stw	r17,72(sp)
    8bd4:	dc001115 	stw	r16,68(sp)
    8bd8:	dfc01a15 	stw	ra,104(sp)
    8bdc:	df001915 	stw	fp,100(sp)
    8be0:	2029883a 	mov	r20,r4
    8be4:	2823883a 	mov	r17,r5
    8be8:	382d883a 	mov	r22,r7
    8bec:	d9800f15 	stw	r6,60(sp)
    8bf0:	0021883a 	mov	r16,zero
    8bf4:	d8000e15 	stw	zero,56(sp)
    8bf8:	d8000a15 	stw	zero,40(sp)
    8bfc:	002b883a 	mov	r21,zero
    8c00:	0027883a 	mov	r19,zero
    8c04:	0025883a 	mov	r18,zero
    8c08:	d8000c15 	stw	zero,48(sp)
    8c0c:	d8000b15 	stw	zero,44(sp)
    8c10:	002f883a 	mov	r23,zero
    8c14:	d8c00915 	stw	r3,36(sp)
    8c18:	d8c00f17 	ldw	r3,60(sp)
    8c1c:	19000003 	ldbu	r4,0(r3)
    8c20:	20803fcc 	andi	r2,r4,255
    8c24:	1080201c 	xori	r2,r2,128
    8c28:	10bfe004 	addi	r2,r2,-128
    8c2c:	10011e26 	beq	r2,zero,90a8 <___vfprintf_internal_r+0x4f8>
    8c30:	00c00044 	movi	r3,1
    8c34:	b8c01426 	beq	r23,r3,8c88 <___vfprintf_internal_r+0xd8>
    8c38:	1dc00216 	blt	r3,r23,8c44 <___vfprintf_internal_r+0x94>
    8c3c:	b8000626 	beq	r23,zero,8c58 <___vfprintf_internal_r+0xa8>
    8c40:	00011506 	br	9098 <___vfprintf_internal_r+0x4e8>
    8c44:	01400084 	movi	r5,2
    8c48:	b9401d26 	beq	r23,r5,8cc0 <___vfprintf_internal_r+0x110>
    8c4c:	014000c4 	movi	r5,3
    8c50:	b9402b26 	beq	r23,r5,8d00 <___vfprintf_internal_r+0x150>
    8c54:	00011006 	br	9098 <___vfprintf_internal_r+0x4e8>
    8c58:	01400944 	movi	r5,37
    8c5c:	1140fc26 	beq	r2,r5,9050 <___vfprintf_internal_r+0x4a0>
    8c60:	88800117 	ldw	r2,4(r17)
    8c64:	d9000005 	stb	r4,0(sp)
    8c68:	01c00044 	movi	r7,1
    8c6c:	d80d883a 	mov	r6,sp
    8c70:	880b883a 	mov	r5,r17
    8c74:	a009883a 	mov	r4,r20
    8c78:	103ee83a 	callr	r2
    8c7c:	1000d81e 	bne	r2,zero,8fe0 <___vfprintf_internal_r+0x430>
    8c80:	84000044 	addi	r16,r16,1
    8c84:	00010406 	br	9098 <___vfprintf_internal_r+0x4e8>
    8c88:	01400c04 	movi	r5,48
    8c8c:	1140fa26 	beq	r2,r5,9078 <___vfprintf_internal_r+0x4c8>
    8c90:	01400944 	movi	r5,37
    8c94:	11400a1e 	bne	r2,r5,8cc0 <___vfprintf_internal_r+0x110>
    8c98:	d8800005 	stb	r2,0(sp)
    8c9c:	88800117 	ldw	r2,4(r17)
    8ca0:	b80f883a 	mov	r7,r23
    8ca4:	d80d883a 	mov	r6,sp
    8ca8:	880b883a 	mov	r5,r17
    8cac:	a009883a 	mov	r4,r20
    8cb0:	103ee83a 	callr	r2
    8cb4:	1000ca1e 	bne	r2,zero,8fe0 <___vfprintf_internal_r+0x430>
    8cb8:	84000044 	addi	r16,r16,1
    8cbc:	0000f506 	br	9094 <___vfprintf_internal_r+0x4e4>
    8cc0:	25fff404 	addi	r23,r4,-48
    8cc4:	bdc03fcc 	andi	r23,r23,255
    8cc8:	00c00244 	movi	r3,9
    8ccc:	1dc00936 	bltu	r3,r23,8cf4 <___vfprintf_internal_r+0x144>
    8cd0:	00bfffc4 	movi	r2,-1
    8cd4:	90800426 	beq	r18,r2,8ce8 <___vfprintf_internal_r+0x138>
    8cd8:	01400284 	movi	r5,10
    8cdc:	9009883a 	mov	r4,r18
    8ce0:	00092080 	call	9208 <__mulsi3>
    8ce4:	00000106 	br	8cec <___vfprintf_internal_r+0x13c>
    8ce8:	0005883a 	mov	r2,zero
    8cec:	b8a5883a 	add	r18,r23,r2
    8cf0:	0000e206 	br	907c <___vfprintf_internal_r+0x4cc>
    8cf4:	01400b84 	movi	r5,46
    8cf8:	1140e426 	beq	r2,r5,908c <___vfprintf_internal_r+0x4dc>
    8cfc:	05c00084 	movi	r23,2
    8d00:	213ff404 	addi	r4,r4,-48
    8d04:	27003fcc 	andi	fp,r4,255
    8d08:	00c00244 	movi	r3,9
    8d0c:	1f000936 	bltu	r3,fp,8d34 <___vfprintf_internal_r+0x184>
    8d10:	00bfffc4 	movi	r2,-1
    8d14:	98800426 	beq	r19,r2,8d28 <___vfprintf_internal_r+0x178>
    8d18:	01400284 	movi	r5,10
    8d1c:	9809883a 	mov	r4,r19
    8d20:	00092080 	call	9208 <__mulsi3>
    8d24:	00000106 	br	8d2c <___vfprintf_internal_r+0x17c>
    8d28:	0005883a 	mov	r2,zero
    8d2c:	e0a7883a 	add	r19,fp,r2
    8d30:	0000d906 	br	9098 <___vfprintf_internal_r+0x4e8>
    8d34:	00c01b04 	movi	r3,108
    8d38:	10c0d226 	beq	r2,r3,9084 <___vfprintf_internal_r+0x4d4>
    8d3c:	013fffc4 	movi	r4,-1
    8d40:	99000226 	beq	r19,r4,8d4c <___vfprintf_internal_r+0x19c>
    8d44:	d8000b15 	stw	zero,44(sp)
    8d48:	00000106 	br	8d50 <___vfprintf_internal_r+0x1a0>
    8d4c:	04c00044 	movi	r19,1
    8d50:	01001a44 	movi	r4,105
    8d54:	11001626 	beq	r2,r4,8db0 <___vfprintf_internal_r+0x200>
    8d58:	20800916 	blt	r4,r2,8d80 <___vfprintf_internal_r+0x1d0>
    8d5c:	010018c4 	movi	r4,99
    8d60:	11008826 	beq	r2,r4,8f84 <___vfprintf_internal_r+0x3d4>
    8d64:	01001904 	movi	r4,100
    8d68:	11001126 	beq	r2,r4,8db0 <___vfprintf_internal_r+0x200>
    8d6c:	01001604 	movi	r4,88
    8d70:	1100c81e 	bne	r2,r4,9094 <___vfprintf_internal_r+0x4e4>
    8d74:	00c00044 	movi	r3,1
    8d78:	d8c00e15 	stw	r3,56(sp)
    8d7c:	00001506 	br	8dd4 <___vfprintf_internal_r+0x224>
    8d80:	01001cc4 	movi	r4,115
    8d84:	11009826 	beq	r2,r4,8fe8 <___vfprintf_internal_r+0x438>
    8d88:	20800416 	blt	r4,r2,8d9c <___vfprintf_internal_r+0x1ec>
    8d8c:	01001bc4 	movi	r4,111
    8d90:	1100c01e 	bne	r2,r4,9094 <___vfprintf_internal_r+0x4e4>
    8d94:	05400204 	movi	r21,8
    8d98:	00000f06 	br	8dd8 <___vfprintf_internal_r+0x228>
    8d9c:	01001d44 	movi	r4,117
    8da0:	11000d26 	beq	r2,r4,8dd8 <___vfprintf_internal_r+0x228>
    8da4:	01001e04 	movi	r4,120
    8da8:	11000a26 	beq	r2,r4,8dd4 <___vfprintf_internal_r+0x224>
    8dac:	0000b906 	br	9094 <___vfprintf_internal_r+0x4e4>
    8db0:	d8c00a17 	ldw	r3,40(sp)
    8db4:	b7000104 	addi	fp,r22,4
    8db8:	18000726 	beq	r3,zero,8dd8 <___vfprintf_internal_r+0x228>
    8dbc:	df000d15 	stw	fp,52(sp)
    8dc0:	b5c00017 	ldw	r23,0(r22)
    8dc4:	b800080e 	bge	r23,zero,8de8 <___vfprintf_internal_r+0x238>
    8dc8:	05efc83a 	sub	r23,zero,r23
    8dcc:	02400044 	movi	r9,1
    8dd0:	00000606 	br	8dec <___vfprintf_internal_r+0x23c>
    8dd4:	05400404 	movi	r21,16
    8dd8:	b0c00104 	addi	r3,r22,4
    8ddc:	d8c00d15 	stw	r3,52(sp)
    8de0:	b5c00017 	ldw	r23,0(r22)
    8de4:	d8000a15 	stw	zero,40(sp)
    8de8:	0013883a 	mov	r9,zero
    8dec:	d839883a 	mov	fp,sp
    8df0:	b8001726 	beq	r23,zero,8e50 <___vfprintf_internal_r+0x2a0>
    8df4:	a80b883a 	mov	r5,r21
    8df8:	b809883a 	mov	r4,r23
    8dfc:	da401015 	stw	r9,64(sp)
    8e00:	00089500 	call	8950 <__udivsi3>
    8e04:	a80b883a 	mov	r5,r21
    8e08:	1009883a 	mov	r4,r2
    8e0c:	102d883a 	mov	r22,r2
    8e10:	00092080 	call	9208 <__mulsi3>
    8e14:	b885c83a 	sub	r2,r23,r2
    8e18:	00c00244 	movi	r3,9
    8e1c:	da401017 	ldw	r9,64(sp)
    8e20:	18800216 	blt	r3,r2,8e2c <___vfprintf_internal_r+0x27c>
    8e24:	10800c04 	addi	r2,r2,48
    8e28:	00000506 	br	8e40 <___vfprintf_internal_r+0x290>
    8e2c:	d8c00e17 	ldw	r3,56(sp)
    8e30:	18000226 	beq	r3,zero,8e3c <___vfprintf_internal_r+0x28c>
    8e34:	10800dc4 	addi	r2,r2,55
    8e38:	00000106 	br	8e40 <___vfprintf_internal_r+0x290>
    8e3c:	108015c4 	addi	r2,r2,87
    8e40:	e0800005 	stb	r2,0(fp)
    8e44:	b02f883a 	mov	r23,r22
    8e48:	e7000044 	addi	fp,fp,1
    8e4c:	003fe806 	br	8df0 <_gp+0xffff5f48>
    8e50:	e6efc83a 	sub	r23,fp,sp
    8e54:	9dc5c83a 	sub	r2,r19,r23
    8e58:	0080090e 	bge	zero,r2,8e80 <___vfprintf_internal_r+0x2d0>
    8e5c:	e085883a 	add	r2,fp,r2
    8e60:	01400c04 	movi	r5,48
    8e64:	d8c00917 	ldw	r3,36(sp)
    8e68:	e009883a 	mov	r4,fp
    8e6c:	e0c0032e 	bgeu	fp,r3,8e7c <___vfprintf_internal_r+0x2cc>
    8e70:	e7000044 	addi	fp,fp,1
    8e74:	21400005 	stb	r5,0(r4)
    8e78:	e0bffa1e 	bne	fp,r2,8e64 <_gp+0xffff5fbc>
    8e7c:	e6efc83a 	sub	r23,fp,sp
    8e80:	d8c00b17 	ldw	r3,44(sp)
    8e84:	4dd1883a 	add	r8,r9,r23
    8e88:	922dc83a 	sub	r22,r18,r8
    8e8c:	18001626 	beq	r3,zero,8ee8 <___vfprintf_internal_r+0x338>
    8e90:	48000a26 	beq	r9,zero,8ebc <___vfprintf_internal_r+0x30c>
    8e94:	00800b44 	movi	r2,45
    8e98:	d8800805 	stb	r2,32(sp)
    8e9c:	88800117 	ldw	r2,4(r17)
    8ea0:	01c00044 	movi	r7,1
    8ea4:	d9800804 	addi	r6,sp,32
    8ea8:	880b883a 	mov	r5,r17
    8eac:	a009883a 	mov	r4,r20
    8eb0:	103ee83a 	callr	r2
    8eb4:	10004a1e 	bne	r2,zero,8fe0 <___vfprintf_internal_r+0x430>
    8eb8:	84000044 	addi	r16,r16,1
    8ebc:	0580070e 	bge	zero,r22,8edc <___vfprintf_internal_r+0x32c>
    8ec0:	b00f883a 	mov	r7,r22
    8ec4:	01800c04 	movi	r6,48
    8ec8:	880b883a 	mov	r5,r17
    8ecc:	a009883a 	mov	r4,r20
    8ed0:	0008b440 	call	8b44 <print_repeat>
    8ed4:	1000421e 	bne	r2,zero,8fe0 <___vfprintf_internal_r+0x430>
    8ed8:	85a1883a 	add	r16,r16,r22
    8edc:	e02d883a 	mov	r22,fp
    8ee0:	bf2fc83a 	sub	r23,r23,fp
    8ee4:	00002006 	br	8f68 <___vfprintf_internal_r+0x3b8>
    8ee8:	0580090e 	bge	zero,r22,8f10 <___vfprintf_internal_r+0x360>
    8eec:	b00f883a 	mov	r7,r22
    8ef0:	01800804 	movi	r6,32
    8ef4:	880b883a 	mov	r5,r17
    8ef8:	a009883a 	mov	r4,r20
    8efc:	da401015 	stw	r9,64(sp)
    8f00:	0008b440 	call	8b44 <print_repeat>
    8f04:	da401017 	ldw	r9,64(sp)
    8f08:	1000351e 	bne	r2,zero,8fe0 <___vfprintf_internal_r+0x430>
    8f0c:	85a1883a 	add	r16,r16,r22
    8f10:	483ff226 	beq	r9,zero,8edc <_gp+0xffff6034>
    8f14:	00800b44 	movi	r2,45
    8f18:	d8800805 	stb	r2,32(sp)
    8f1c:	88800117 	ldw	r2,4(r17)
    8f20:	01c00044 	movi	r7,1
    8f24:	d9800804 	addi	r6,sp,32
    8f28:	880b883a 	mov	r5,r17
    8f2c:	a009883a 	mov	r4,r20
    8f30:	103ee83a 	callr	r2
    8f34:	10002a1e 	bne	r2,zero,8fe0 <___vfprintf_internal_r+0x430>
    8f38:	84000044 	addi	r16,r16,1
    8f3c:	003fe706 	br	8edc <_gp+0xffff6034>
    8f40:	b5bfffc4 	addi	r22,r22,-1
    8f44:	b0800003 	ldbu	r2,0(r22)
    8f48:	01c00044 	movi	r7,1
    8f4c:	d9800804 	addi	r6,sp,32
    8f50:	d8800805 	stb	r2,32(sp)
    8f54:	88800117 	ldw	r2,4(r17)
    8f58:	880b883a 	mov	r5,r17
    8f5c:	a009883a 	mov	r4,r20
    8f60:	103ee83a 	callr	r2
    8f64:	10001e1e 	bne	r2,zero,8fe0 <___vfprintf_internal_r+0x430>
    8f68:	8585c83a 	sub	r2,r16,r22
    8f6c:	b5c9883a 	add	r4,r22,r23
    8f70:	e085883a 	add	r2,fp,r2
    8f74:	013ff216 	blt	zero,r4,8f40 <_gp+0xffff6098>
    8f78:	1021883a 	mov	r16,r2
    8f7c:	dd800d17 	ldw	r22,52(sp)
    8f80:	00004406 	br	9094 <___vfprintf_internal_r+0x4e4>
    8f84:	00800044 	movi	r2,1
    8f88:	1480080e 	bge	r2,r18,8fac <___vfprintf_internal_r+0x3fc>
    8f8c:	95ffffc4 	addi	r23,r18,-1
    8f90:	b80f883a 	mov	r7,r23
    8f94:	01800804 	movi	r6,32
    8f98:	880b883a 	mov	r5,r17
    8f9c:	a009883a 	mov	r4,r20
    8fa0:	0008b440 	call	8b44 <print_repeat>
    8fa4:	10000e1e 	bne	r2,zero,8fe0 <___vfprintf_internal_r+0x430>
    8fa8:	85e1883a 	add	r16,r16,r23
    8fac:	b0800017 	ldw	r2,0(r22)
    8fb0:	01c00044 	movi	r7,1
    8fb4:	d80d883a 	mov	r6,sp
    8fb8:	d8800005 	stb	r2,0(sp)
    8fbc:	88800117 	ldw	r2,4(r17)
    8fc0:	880b883a 	mov	r5,r17
    8fc4:	a009883a 	mov	r4,r20
    8fc8:	b5c00104 	addi	r23,r22,4
    8fcc:	103ee83a 	callr	r2
    8fd0:	1000031e 	bne	r2,zero,8fe0 <___vfprintf_internal_r+0x430>
    8fd4:	84000044 	addi	r16,r16,1
    8fd8:	b82d883a 	mov	r22,r23
    8fdc:	00002d06 	br	9094 <___vfprintf_internal_r+0x4e4>
    8fe0:	00bfffc4 	movi	r2,-1
    8fe4:	00003106 	br	90ac <___vfprintf_internal_r+0x4fc>
    8fe8:	b5c00017 	ldw	r23,0(r22)
    8fec:	b7000104 	addi	fp,r22,4
    8ff0:	b809883a 	mov	r4,r23
    8ff4:	0008b280 	call	8b28 <strlen>
    8ff8:	9091c83a 	sub	r8,r18,r2
    8ffc:	102d883a 	mov	r22,r2
    9000:	0200090e 	bge	zero,r8,9028 <___vfprintf_internal_r+0x478>
    9004:	400f883a 	mov	r7,r8
    9008:	01800804 	movi	r6,32
    900c:	880b883a 	mov	r5,r17
    9010:	a009883a 	mov	r4,r20
    9014:	da001015 	stw	r8,64(sp)
    9018:	0008b440 	call	8b44 <print_repeat>
    901c:	da001017 	ldw	r8,64(sp)
    9020:	103fef1e 	bne	r2,zero,8fe0 <_gp+0xffff6138>
    9024:	8221883a 	add	r16,r16,r8
    9028:	88800117 	ldw	r2,4(r17)
    902c:	b00f883a 	mov	r7,r22
    9030:	b80d883a 	mov	r6,r23
    9034:	880b883a 	mov	r5,r17
    9038:	a009883a 	mov	r4,r20
    903c:	103ee83a 	callr	r2
    9040:	103fe71e 	bne	r2,zero,8fe0 <_gp+0xffff6138>
    9044:	85a1883a 	add	r16,r16,r22
    9048:	e02d883a 	mov	r22,fp
    904c:	00001106 	br	9094 <___vfprintf_internal_r+0x4e4>
    9050:	00c00044 	movi	r3,1
    9054:	04ffffc4 	movi	r19,-1
    9058:	d8000e15 	stw	zero,56(sp)
    905c:	d8c00a15 	stw	r3,40(sp)
    9060:	05400284 	movi	r21,10
    9064:	9825883a 	mov	r18,r19
    9068:	d8000c15 	stw	zero,48(sp)
    906c:	d8000b15 	stw	zero,44(sp)
    9070:	182f883a 	mov	r23,r3
    9074:	00000806 	br	9098 <___vfprintf_internal_r+0x4e8>
    9078:	ddc00b15 	stw	r23,44(sp)
    907c:	05c00084 	movi	r23,2
    9080:	00000506 	br	9098 <___vfprintf_internal_r+0x4e8>
    9084:	00c00044 	movi	r3,1
    9088:	d8c00c15 	stw	r3,48(sp)
    908c:	05c000c4 	movi	r23,3
    9090:	00000106 	br	9098 <___vfprintf_internal_r+0x4e8>
    9094:	002f883a 	mov	r23,zero
    9098:	d8c00f17 	ldw	r3,60(sp)
    909c:	18c00044 	addi	r3,r3,1
    90a0:	d8c00f15 	stw	r3,60(sp)
    90a4:	003edc06 	br	8c18 <_gp+0xffff5d70>
    90a8:	8005883a 	mov	r2,r16
    90ac:	dfc01a17 	ldw	ra,104(sp)
    90b0:	df001917 	ldw	fp,100(sp)
    90b4:	ddc01817 	ldw	r23,96(sp)
    90b8:	dd801717 	ldw	r22,92(sp)
    90bc:	dd401617 	ldw	r21,88(sp)
    90c0:	dd001517 	ldw	r20,84(sp)
    90c4:	dcc01417 	ldw	r19,80(sp)
    90c8:	dc801317 	ldw	r18,76(sp)
    90cc:	dc401217 	ldw	r17,72(sp)
    90d0:	dc001117 	ldw	r16,68(sp)
    90d4:	dec01b04 	addi	sp,sp,108
    90d8:	f800283a 	ret

000090dc <__vfprintf_internal>:
    90dc:	00800074 	movhi	r2,1
    90e0:	10abad04 	addi	r2,r2,-20812
    90e4:	300f883a 	mov	r7,r6
    90e8:	280d883a 	mov	r6,r5
    90ec:	200b883a 	mov	r5,r4
    90f0:	11000017 	ldw	r4,0(r2)
    90f4:	0008bb01 	jmpi	8bb0 <___vfprintf_internal_r>

000090f8 <__sfvwrite_small_dev>:
    90f8:	2880000b 	ldhu	r2,0(r5)
    90fc:	1080020c 	andi	r2,r2,8
    9100:	10002126 	beq	r2,zero,9188 <__sfvwrite_small_dev+0x90>
    9104:	2880008f 	ldh	r2,2(r5)
    9108:	defffa04 	addi	sp,sp,-24
    910c:	dc000015 	stw	r16,0(sp)
    9110:	dfc00515 	stw	ra,20(sp)
    9114:	dd000415 	stw	r20,16(sp)
    9118:	dcc00315 	stw	r19,12(sp)
    911c:	dc800215 	stw	r18,8(sp)
    9120:	dc400115 	stw	r17,4(sp)
    9124:	2821883a 	mov	r16,r5
    9128:	10001216 	blt	r2,zero,9174 <__sfvwrite_small_dev+0x7c>
    912c:	2027883a 	mov	r19,r4
    9130:	3025883a 	mov	r18,r6
    9134:	3823883a 	mov	r17,r7
    9138:	05010004 	movi	r20,1024
    913c:	04400b0e 	bge	zero,r17,916c <__sfvwrite_small_dev+0x74>
    9140:	880f883a 	mov	r7,r17
    9144:	a440010e 	bge	r20,r17,914c <__sfvwrite_small_dev+0x54>
    9148:	01c10004 	movi	r7,1024
    914c:	8140008f 	ldh	r5,2(r16)
    9150:	900d883a 	mov	r6,r18
    9154:	9809883a 	mov	r4,r19
    9158:	00091b00 	call	91b0 <_write_r>
    915c:	0080050e 	bge	zero,r2,9174 <__sfvwrite_small_dev+0x7c>
    9160:	88a3c83a 	sub	r17,r17,r2
    9164:	90a5883a 	add	r18,r18,r2
    9168:	003ff406 	br	913c <_gp+0xffff6294>
    916c:	0005883a 	mov	r2,zero
    9170:	00000706 	br	9190 <__sfvwrite_small_dev+0x98>
    9174:	8080000b 	ldhu	r2,0(r16)
    9178:	10801014 	ori	r2,r2,64
    917c:	8080000d 	sth	r2,0(r16)
    9180:	00bfffc4 	movi	r2,-1
    9184:	00000206 	br	9190 <__sfvwrite_small_dev+0x98>
    9188:	00bfffc4 	movi	r2,-1
    918c:	f800283a 	ret
    9190:	dfc00517 	ldw	ra,20(sp)
    9194:	dd000417 	ldw	r20,16(sp)
    9198:	dcc00317 	ldw	r19,12(sp)
    919c:	dc800217 	ldw	r18,8(sp)
    91a0:	dc400117 	ldw	r17,4(sp)
    91a4:	dc000017 	ldw	r16,0(sp)
    91a8:	dec00604 	addi	sp,sp,24
    91ac:	f800283a 	ret

000091b0 <_write_r>:
    91b0:	defffd04 	addi	sp,sp,-12
    91b4:	dc000015 	stw	r16,0(sp)
    91b8:	04000074 	movhi	r16,1
    91bc:	dc400115 	stw	r17,4(sp)
    91c0:	842c8204 	addi	r16,r16,-19960
    91c4:	2023883a 	mov	r17,r4
    91c8:	2809883a 	mov	r4,r5
    91cc:	300b883a 	mov	r5,r6
    91d0:	380d883a 	mov	r6,r7
    91d4:	dfc00215 	stw	ra,8(sp)
    91d8:	80000015 	stw	zero,0(r16)
    91dc:	00096740 	call	9674 <write>
    91e0:	00ffffc4 	movi	r3,-1
    91e4:	10c0031e 	bne	r2,r3,91f4 <_write_r+0x44>
    91e8:	80c00017 	ldw	r3,0(r16)
    91ec:	18000126 	beq	r3,zero,91f4 <_write_r+0x44>
    91f0:	88c00015 	stw	r3,0(r17)
    91f4:	dfc00217 	ldw	ra,8(sp)
    91f8:	dc400117 	ldw	r17,4(sp)
    91fc:	dc000017 	ldw	r16,0(sp)
    9200:	dec00304 	addi	sp,sp,12
    9204:	f800283a 	ret

00009208 <__mulsi3>:
    9208:	0005883a 	mov	r2,zero
    920c:	20000726 	beq	r4,zero,922c <__mulsi3+0x24>
    9210:	20c0004c 	andi	r3,r4,1
    9214:	2008d07a 	srli	r4,r4,1
    9218:	18000126 	beq	r3,zero,9220 <__mulsi3+0x18>
    921c:	1145883a 	add	r2,r2,r5
    9220:	294b883a 	add	r5,r5,r5
    9224:	203ffa1e 	bne	r4,zero,9210 <_gp+0xffff6368>
    9228:	f800283a 	ret
    922c:	f800283a 	ret

00009230 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9230:	defff904 	addi	sp,sp,-28
    9234:	dfc00615 	stw	ra,24(sp)
    9238:	df000515 	stw	fp,20(sp)
    923c:	df000504 	addi	fp,sp,20
    9240:	e13ffc15 	stw	r4,-16(fp)
    9244:	e17ffd15 	stw	r5,-12(fp)
    9248:	e1bffe15 	stw	r6,-8(fp)
    924c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    9250:	e0800217 	ldw	r2,8(fp)
    9254:	d8800015 	stw	r2,0(sp)
    9258:	e1ffff17 	ldw	r7,-4(fp)
    925c:	e1bffe17 	ldw	r6,-8(fp)
    9260:	e17ffd17 	ldw	r5,-12(fp)
    9264:	e13ffc17 	ldw	r4,-16(fp)
    9268:	00093e00 	call	93e0 <alt_iic_isr_register>
}  
    926c:	e037883a 	mov	sp,fp
    9270:	dfc00117 	ldw	ra,4(sp)
    9274:	df000017 	ldw	fp,0(sp)
    9278:	dec00204 	addi	sp,sp,8
    927c:	f800283a 	ret

00009280 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    9280:	defff904 	addi	sp,sp,-28
    9284:	df000615 	stw	fp,24(sp)
    9288:	df000604 	addi	fp,sp,24
    928c:	e13ffe15 	stw	r4,-8(fp)
    9290:	e17fff15 	stw	r5,-4(fp)
    9294:	e0bfff17 	ldw	r2,-4(fp)
    9298:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    929c:	0005303a 	rdctl	r2,status
    92a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    92a4:	e0fffb17 	ldw	r3,-20(fp)
    92a8:	00bfff84 	movi	r2,-2
    92ac:	1884703a 	and	r2,r3,r2
    92b0:	1001703a 	wrctl	status,r2
  
  return context;
    92b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    92b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    92bc:	00c00044 	movi	r3,1
    92c0:	e0bffa17 	ldw	r2,-24(fp)
    92c4:	1884983a 	sll	r2,r3,r2
    92c8:	1007883a 	mov	r3,r2
    92cc:	d0a0d917 	ldw	r2,-31900(gp)
    92d0:	1884b03a 	or	r2,r3,r2
    92d4:	d0a0d915 	stw	r2,-31900(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    92d8:	d0a0d917 	ldw	r2,-31900(gp)
    92dc:	100170fa 	wrctl	ienable,r2
    92e0:	e0bffc17 	ldw	r2,-16(fp)
    92e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    92e8:	e0bffd17 	ldw	r2,-12(fp)
    92ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    92f0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    92f4:	0001883a 	nop
}
    92f8:	e037883a 	mov	sp,fp
    92fc:	df000017 	ldw	fp,0(sp)
    9300:	dec00104 	addi	sp,sp,4
    9304:	f800283a 	ret

00009308 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    9308:	defff904 	addi	sp,sp,-28
    930c:	df000615 	stw	fp,24(sp)
    9310:	df000604 	addi	fp,sp,24
    9314:	e13ffe15 	stw	r4,-8(fp)
    9318:	e17fff15 	stw	r5,-4(fp)
    931c:	e0bfff17 	ldw	r2,-4(fp)
    9320:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9324:	0005303a 	rdctl	r2,status
    9328:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    932c:	e0fffb17 	ldw	r3,-20(fp)
    9330:	00bfff84 	movi	r2,-2
    9334:	1884703a 	and	r2,r3,r2
    9338:	1001703a 	wrctl	status,r2
  
  return context;
    933c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9340:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    9344:	00c00044 	movi	r3,1
    9348:	e0bffa17 	ldw	r2,-24(fp)
    934c:	1884983a 	sll	r2,r3,r2
    9350:	0084303a 	nor	r2,zero,r2
    9354:	1007883a 	mov	r3,r2
    9358:	d0a0d917 	ldw	r2,-31900(gp)
    935c:	1884703a 	and	r2,r3,r2
    9360:	d0a0d915 	stw	r2,-31900(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9364:	d0a0d917 	ldw	r2,-31900(gp)
    9368:	100170fa 	wrctl	ienable,r2
    936c:	e0bffc17 	ldw	r2,-16(fp)
    9370:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9374:	e0bffd17 	ldw	r2,-12(fp)
    9378:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    937c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    9380:	0001883a 	nop
}
    9384:	e037883a 	mov	sp,fp
    9388:	df000017 	ldw	fp,0(sp)
    938c:	dec00104 	addi	sp,sp,4
    9390:	f800283a 	ret

00009394 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    9394:	defffc04 	addi	sp,sp,-16
    9398:	df000315 	stw	fp,12(sp)
    939c:	df000304 	addi	fp,sp,12
    93a0:	e13ffe15 	stw	r4,-8(fp)
    93a4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    93a8:	000530fa 	rdctl	r2,ienable
    93ac:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    93b0:	00c00044 	movi	r3,1
    93b4:	e0bfff17 	ldw	r2,-4(fp)
    93b8:	1884983a 	sll	r2,r3,r2
    93bc:	1007883a 	mov	r3,r2
    93c0:	e0bffd17 	ldw	r2,-12(fp)
    93c4:	1884703a 	and	r2,r3,r2
    93c8:	1004c03a 	cmpne	r2,r2,zero
    93cc:	10803fcc 	andi	r2,r2,255
}
    93d0:	e037883a 	mov	sp,fp
    93d4:	df000017 	ldw	fp,0(sp)
    93d8:	dec00104 	addi	sp,sp,4
    93dc:	f800283a 	ret

000093e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    93e0:	defff504 	addi	sp,sp,-44
    93e4:	dfc00a15 	stw	ra,40(sp)
    93e8:	df000915 	stw	fp,36(sp)
    93ec:	df000904 	addi	fp,sp,36
    93f0:	e13ffc15 	stw	r4,-16(fp)
    93f4:	e17ffd15 	stw	r5,-12(fp)
    93f8:	e1bffe15 	stw	r6,-8(fp)
    93fc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    9400:	00bffa84 	movi	r2,-22
    9404:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    9408:	e0bffd17 	ldw	r2,-12(fp)
    940c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    9410:	e0bff817 	ldw	r2,-32(fp)
    9414:	10800808 	cmpgei	r2,r2,32
    9418:	1000271e 	bne	r2,zero,94b8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    941c:	0005303a 	rdctl	r2,status
    9420:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9424:	e0fffb17 	ldw	r3,-20(fp)
    9428:	00bfff84 	movi	r2,-2
    942c:	1884703a 	and	r2,r3,r2
    9430:	1001703a 	wrctl	status,r2
  
  return context;
    9434:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    9438:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    943c:	00800074 	movhi	r2,1
    9440:	10ac8a04 	addi	r2,r2,-19928
    9444:	e0fff817 	ldw	r3,-32(fp)
    9448:	180690fa 	slli	r3,r3,3
    944c:	10c5883a 	add	r2,r2,r3
    9450:	e0fffe17 	ldw	r3,-8(fp)
    9454:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    9458:	00800074 	movhi	r2,1
    945c:	10ac8a04 	addi	r2,r2,-19928
    9460:	e0fff817 	ldw	r3,-32(fp)
    9464:	180690fa 	slli	r3,r3,3
    9468:	10c5883a 	add	r2,r2,r3
    946c:	10800104 	addi	r2,r2,4
    9470:	e0ffff17 	ldw	r3,-4(fp)
    9474:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9478:	e0bffe17 	ldw	r2,-8(fp)
    947c:	10000526 	beq	r2,zero,9494 <alt_iic_isr_register+0xb4>
    9480:	e0bff817 	ldw	r2,-32(fp)
    9484:	100b883a 	mov	r5,r2
    9488:	e13ffc17 	ldw	r4,-16(fp)
    948c:	00092800 	call	9280 <alt_ic_irq_enable>
    9490:	00000406 	br	94a4 <alt_iic_isr_register+0xc4>
    9494:	e0bff817 	ldw	r2,-32(fp)
    9498:	100b883a 	mov	r5,r2
    949c:	e13ffc17 	ldw	r4,-16(fp)
    94a0:	00093080 	call	9308 <alt_ic_irq_disable>
    94a4:	e0bff715 	stw	r2,-36(fp)
    94a8:	e0bffa17 	ldw	r2,-24(fp)
    94ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    94b0:	e0bff917 	ldw	r2,-28(fp)
    94b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    94b8:	e0bff717 	ldw	r2,-36(fp)
}
    94bc:	e037883a 	mov	sp,fp
    94c0:	dfc00117 	ldw	ra,4(sp)
    94c4:	df000017 	ldw	fp,0(sp)
    94c8:	dec00204 	addi	sp,sp,8
    94cc:	f800283a 	ret

000094d0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    94d0:	defffc04 	addi	sp,sp,-16
    94d4:	df000315 	stw	fp,12(sp)
    94d8:	df000304 	addi	fp,sp,12
    94dc:	e13ffd15 	stw	r4,-12(fp)
    94e0:	e17ffe15 	stw	r5,-8(fp)
    94e4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    94e8:	e0fffe17 	ldw	r3,-8(fp)
    94ec:	e0bffd17 	ldw	r2,-12(fp)
    94f0:	18800c26 	beq	r3,r2,9524 <alt_load_section+0x54>
  {
    while( to != end )
    94f4:	00000806 	br	9518 <alt_load_section+0x48>
    {
      *to++ = *from++;
    94f8:	e0bffe17 	ldw	r2,-8(fp)
    94fc:	10c00104 	addi	r3,r2,4
    9500:	e0fffe15 	stw	r3,-8(fp)
    9504:	e0fffd17 	ldw	r3,-12(fp)
    9508:	19000104 	addi	r4,r3,4
    950c:	e13ffd15 	stw	r4,-12(fp)
    9510:	18c00017 	ldw	r3,0(r3)
    9514:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    9518:	e0fffe17 	ldw	r3,-8(fp)
    951c:	e0bfff17 	ldw	r2,-4(fp)
    9520:	18bff51e 	bne	r3,r2,94f8 <_gp+0xffff6650>
    {
      *to++ = *from++;
    }
  }
}
    9524:	0001883a 	nop
    9528:	e037883a 	mov	sp,fp
    952c:	df000017 	ldw	fp,0(sp)
    9530:	dec00104 	addi	sp,sp,4
    9534:	f800283a 	ret

00009538 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    9538:	defffe04 	addi	sp,sp,-8
    953c:	dfc00115 	stw	ra,4(sp)
    9540:	df000015 	stw	fp,0(sp)
    9544:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    9548:	01800074 	movhi	r6,1
    954c:	31abb704 	addi	r6,r6,-20772
    9550:	01400074 	movhi	r5,1
    9554:	296afa04 	addi	r5,r5,-21528
    9558:	01000074 	movhi	r4,1
    955c:	212bb704 	addi	r4,r4,-20772
    9560:	00094d00 	call	94d0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9564:	01800074 	movhi	r6,1
    9568:	31a08c04 	addi	r6,r6,-32208
    956c:	01400074 	movhi	r5,1
    9570:	29600804 	addi	r5,r5,-32736
    9574:	01000074 	movhi	r4,1
    9578:	21200804 	addi	r4,r4,-32736
    957c:	00094d00 	call	94d0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9580:	01800074 	movhi	r6,1
    9584:	31aafa04 	addi	r6,r6,-21528
    9588:	01400074 	movhi	r5,1
    958c:	296aca04 	addi	r5,r5,-21720
    9590:	01000074 	movhi	r4,1
    9594:	212aca04 	addi	r4,r4,-21720
    9598:	00094d00 	call	94d0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    959c:	0009c740 	call	9c74 <alt_dcache_flush_all>
  alt_icache_flush_all();
    95a0:	0009e600 	call	9e60 <alt_icache_flush_all>
}
    95a4:	0001883a 	nop
    95a8:	e037883a 	mov	sp,fp
    95ac:	dfc00117 	ldw	ra,4(sp)
    95b0:	df000017 	ldw	fp,0(sp)
    95b4:	dec00204 	addi	sp,sp,8
    95b8:	f800283a 	ret

000095bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    95bc:	defffd04 	addi	sp,sp,-12
    95c0:	dfc00215 	stw	ra,8(sp)
    95c4:	df000115 	stw	fp,4(sp)
    95c8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    95cc:	0009883a 	mov	r4,zero
    95d0:	00097a80 	call	97a8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    95d4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    95d8:	00097e00 	call	97e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    95dc:	01800074 	movhi	r6,1
    95e0:	31aaed04 	addi	r6,r6,-21580
    95e4:	01400074 	movhi	r5,1
    95e8:	296aed04 	addi	r5,r5,-21580
    95ec:	01000074 	movhi	r4,1
    95f0:	212aed04 	addi	r4,r4,-21580
    95f4:	000a0000 	call	a000 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    95f8:	0009da00 	call	9da0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    95fc:	01000074 	movhi	r4,1
    9600:	21278004 	addi	r4,r4,-25088
    9604:	000a7a80 	call	a7a8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    9608:	d0a0da17 	ldw	r2,-31896(gp)
    960c:	d0e0db17 	ldw	r3,-31892(gp)
    9610:	d120dc17 	ldw	r4,-31888(gp)
    9614:	200d883a 	mov	r6,r4
    9618:	180b883a 	mov	r5,r3
    961c:	1009883a 	mov	r4,r2
    9620:	000878c0 	call	878c <main>
    9624:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    9628:	01000044 	movi	r4,1
    962c:	0009b9c0 	call	9b9c <close>
  exit (result);
    9630:	e13fff17 	ldw	r4,-4(fp)
    9634:	000a7bc0 	call	a7bc <exit>

00009638 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9638:	defffe04 	addi	sp,sp,-8
    963c:	dfc00115 	stw	ra,4(sp)
    9640:	df000015 	stw	fp,0(sp)
    9644:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9648:	d0a00a17 	ldw	r2,-32728(gp)
    964c:	10000326 	beq	r2,zero,965c <alt_get_errno+0x24>
    9650:	d0a00a17 	ldw	r2,-32728(gp)
    9654:	103ee83a 	callr	r2
    9658:	00000106 	br	9660 <alt_get_errno+0x28>
    965c:	d0a0d804 	addi	r2,gp,-31904
}
    9660:	e037883a 	mov	sp,fp
    9664:	dfc00117 	ldw	ra,4(sp)
    9668:	df000017 	ldw	fp,0(sp)
    966c:	dec00204 	addi	sp,sp,8
    9670:	f800283a 	ret

00009674 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9674:	defff904 	addi	sp,sp,-28
    9678:	dfc00615 	stw	ra,24(sp)
    967c:	df000515 	stw	fp,20(sp)
    9680:	df000504 	addi	fp,sp,20
    9684:	e13ffd15 	stw	r4,-12(fp)
    9688:	e17ffe15 	stw	r5,-8(fp)
    968c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9690:	e0bffd17 	ldw	r2,-12(fp)
    9694:	10000816 	blt	r2,zero,96b8 <write+0x44>
    9698:	01400304 	movi	r5,12
    969c:	e13ffd17 	ldw	r4,-12(fp)
    96a0:	00092080 	call	9208 <__mulsi3>
    96a4:	1007883a 	mov	r3,r2
    96a8:	00800074 	movhi	r2,1
    96ac:	10ab4a04 	addi	r2,r2,-21208
    96b0:	1885883a 	add	r2,r3,r2
    96b4:	00000106 	br	96bc <write+0x48>
    96b8:	0005883a 	mov	r2,zero
    96bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    96c0:	e0bffb17 	ldw	r2,-20(fp)
    96c4:	10002126 	beq	r2,zero,974c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    96c8:	e0bffb17 	ldw	r2,-20(fp)
    96cc:	10800217 	ldw	r2,8(r2)
    96d0:	108000cc 	andi	r2,r2,3
    96d4:	10001826 	beq	r2,zero,9738 <write+0xc4>
    96d8:	e0bffb17 	ldw	r2,-20(fp)
    96dc:	10800017 	ldw	r2,0(r2)
    96e0:	10800617 	ldw	r2,24(r2)
    96e4:	10001426 	beq	r2,zero,9738 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    96e8:	e0bffb17 	ldw	r2,-20(fp)
    96ec:	10800017 	ldw	r2,0(r2)
    96f0:	10800617 	ldw	r2,24(r2)
    96f4:	e0ffff17 	ldw	r3,-4(fp)
    96f8:	180d883a 	mov	r6,r3
    96fc:	e17ffe17 	ldw	r5,-8(fp)
    9700:	e13ffb17 	ldw	r4,-20(fp)
    9704:	103ee83a 	callr	r2
    9708:	e0bffc15 	stw	r2,-16(fp)
    970c:	e0bffc17 	ldw	r2,-16(fp)
    9710:	1000070e 	bge	r2,zero,9730 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    9714:	00096380 	call	9638 <alt_get_errno>
    9718:	1007883a 	mov	r3,r2
    971c:	e0bffc17 	ldw	r2,-16(fp)
    9720:	0085c83a 	sub	r2,zero,r2
    9724:	18800015 	stw	r2,0(r3)
        return -1;
    9728:	00bfffc4 	movi	r2,-1
    972c:	00000c06 	br	9760 <write+0xec>
      }
      return rval;
    9730:	e0bffc17 	ldw	r2,-16(fp)
    9734:	00000a06 	br	9760 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    9738:	00096380 	call	9638 <alt_get_errno>
    973c:	1007883a 	mov	r3,r2
    9740:	00800344 	movi	r2,13
    9744:	18800015 	stw	r2,0(r3)
    9748:	00000406 	br	975c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    974c:	00096380 	call	9638 <alt_get_errno>
    9750:	1007883a 	mov	r3,r2
    9754:	00801444 	movi	r2,81
    9758:	18800015 	stw	r2,0(r3)
  }
  return -1;
    975c:	00bfffc4 	movi	r2,-1
}
    9760:	e037883a 	mov	sp,fp
    9764:	dfc00117 	ldw	ra,4(sp)
    9768:	df000017 	ldw	fp,0(sp)
    976c:	dec00204 	addi	sp,sp,8
    9770:	f800283a 	ret

00009774 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9774:	defffd04 	addi	sp,sp,-12
    9778:	dfc00215 	stw	ra,8(sp)
    977c:	df000115 	stw	fp,4(sp)
    9780:	df000104 	addi	fp,sp,4
    9784:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9788:	d1600704 	addi	r5,gp,-32740
    978c:	e13fff17 	ldw	r4,-4(fp)
    9790:	0009cfc0 	call	9cfc <alt_dev_llist_insert>
}
    9794:	e037883a 	mov	sp,fp
    9798:	dfc00117 	ldw	ra,4(sp)
    979c:	df000017 	ldw	fp,0(sp)
    97a0:	dec00204 	addi	sp,sp,8
    97a4:	f800283a 	ret

000097a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    97a8:	defffd04 	addi	sp,sp,-12
    97ac:	dfc00215 	stw	ra,8(sp)
    97b0:	df000115 	stw	fp,4(sp)
    97b4:	df000104 	addi	fp,sp,4
    97b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    97bc:	000a5280 	call	a528 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    97c0:	00800044 	movi	r2,1
    97c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    97c8:	0001883a 	nop
    97cc:	e037883a 	mov	sp,fp
    97d0:	dfc00117 	ldw	ra,4(sp)
    97d4:	df000017 	ldw	fp,0(sp)
    97d8:	dec00204 	addi	sp,sp,8
    97dc:	f800283a 	ret

000097e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    97e0:	defffe04 	addi	sp,sp,-8
    97e4:	dfc00115 	stw	ra,4(sp)
    97e8:	df000015 	stw	fp,0(sp)
    97ec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    97f0:	01c0fa04 	movi	r7,1000
    97f4:	01800044 	movi	r6,1
    97f8:	000b883a 	mov	r5,zero
    97fc:	01000074 	movhi	r4,1
    9800:	21040004 	addi	r4,r4,4096
    9804:	0009ae40 	call	9ae4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    9808:	01000074 	movhi	r4,1
    980c:	212b3504 	addi	r4,r4,-21292
    9810:	00097740 	call	9774 <alt_dev_reg>
}
    9814:	0001883a 	nop
    9818:	e037883a 	mov	sp,fp
    981c:	dfc00117 	ldw	ra,4(sp)
    9820:	df000017 	ldw	fp,0(sp)
    9824:	dec00204 	addi	sp,sp,8
    9828:	f800283a 	ret

0000982c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    982c:	defffa04 	addi	sp,sp,-24
    9830:	dfc00515 	stw	ra,20(sp)
    9834:	df000415 	stw	fp,16(sp)
    9838:	df000404 	addi	fp,sp,16
    983c:	e13ffd15 	stw	r4,-12(fp)
    9840:	e17ffe15 	stw	r5,-8(fp)
    9844:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9848:	e0bffd17 	ldw	r2,-12(fp)
    984c:	10800017 	ldw	r2,0(r2)
    9850:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9854:	e0bffc17 	ldw	r2,-16(fp)
    9858:	10c00a04 	addi	r3,r2,40
    985c:	e0bffd17 	ldw	r2,-12(fp)
    9860:	10800217 	ldw	r2,8(r2)
    9864:	100f883a 	mov	r7,r2
    9868:	e1bfff17 	ldw	r6,-4(fp)
    986c:	e17ffe17 	ldw	r5,-8(fp)
    9870:	1809883a 	mov	r4,r3
    9874:	00098ec0 	call	98ec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9878:	e037883a 	mov	sp,fp
    987c:	dfc00117 	ldw	ra,4(sp)
    9880:	df000017 	ldw	fp,0(sp)
    9884:	dec00204 	addi	sp,sp,8
    9888:	f800283a 	ret

0000988c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    988c:	defffa04 	addi	sp,sp,-24
    9890:	dfc00515 	stw	ra,20(sp)
    9894:	df000415 	stw	fp,16(sp)
    9898:	df000404 	addi	fp,sp,16
    989c:	e13ffd15 	stw	r4,-12(fp)
    98a0:	e17ffe15 	stw	r5,-8(fp)
    98a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    98a8:	e0bffd17 	ldw	r2,-12(fp)
    98ac:	10800017 	ldw	r2,0(r2)
    98b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    98b4:	e0bffc17 	ldw	r2,-16(fp)
    98b8:	10c00a04 	addi	r3,r2,40
    98bc:	e0bffd17 	ldw	r2,-12(fp)
    98c0:	10800217 	ldw	r2,8(r2)
    98c4:	100f883a 	mov	r7,r2
    98c8:	e1bfff17 	ldw	r6,-4(fp)
    98cc:	e17ffe17 	ldw	r5,-8(fp)
    98d0:	1809883a 	mov	r4,r3
    98d4:	00099d80 	call	99d8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    98d8:	e037883a 	mov	sp,fp
    98dc:	dfc00117 	ldw	ra,4(sp)
    98e0:	df000017 	ldw	fp,0(sp)
    98e4:	dec00204 	addi	sp,sp,8
    98e8:	f800283a 	ret

000098ec <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    98ec:	defff704 	addi	sp,sp,-36
    98f0:	df000815 	stw	fp,32(sp)
    98f4:	df000804 	addi	fp,sp,32
    98f8:	e13ffc15 	stw	r4,-16(fp)
    98fc:	e17ffd15 	stw	r5,-12(fp)
    9900:	e1bffe15 	stw	r6,-8(fp)
    9904:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9908:	e0bffc17 	ldw	r2,-16(fp)
    990c:	10800017 	ldw	r2,0(r2)
    9910:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    9914:	e0bffd17 	ldw	r2,-12(fp)
    9918:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    991c:	e0bffe17 	ldw	r2,-8(fp)
    9920:	e0fffd17 	ldw	r3,-12(fp)
    9924:	1885883a 	add	r2,r3,r2
    9928:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    992c:	00001206 	br	9978 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9930:	e0bff917 	ldw	r2,-28(fp)
    9934:	10800037 	ldwio	r2,0(r2)
    9938:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    993c:	e0bffb17 	ldw	r2,-20(fp)
    9940:	10a0000c 	andi	r2,r2,32768
    9944:	10000626 	beq	r2,zero,9960 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9948:	e0bff817 	ldw	r2,-32(fp)
    994c:	10c00044 	addi	r3,r2,1
    9950:	e0fff815 	stw	r3,-32(fp)
    9954:	e0fffb17 	ldw	r3,-20(fp)
    9958:	10c00005 	stb	r3,0(r2)
    995c:	00000606 	br	9978 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    9960:	e0fff817 	ldw	r3,-32(fp)
    9964:	e0bffd17 	ldw	r2,-12(fp)
    9968:	1880071e 	bne	r3,r2,9988 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    996c:	e0bfff17 	ldw	r2,-4(fp)
    9970:	1090000c 	andi	r2,r2,16384
    9974:	1000061e 	bne	r2,zero,9990 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    9978:	e0fff817 	ldw	r3,-32(fp)
    997c:	e0bffa17 	ldw	r2,-24(fp)
    9980:	18bfeb36 	bltu	r3,r2,9930 <_gp+0xffff6a88>
    9984:	00000306 	br	9994 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    9988:	0001883a 	nop
    998c:	00000106 	br	9994 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    9990:	0001883a 	nop
    
  }

  if (ptr != buffer)
    9994:	e0fff817 	ldw	r3,-32(fp)
    9998:	e0bffd17 	ldw	r2,-12(fp)
    999c:	18800426 	beq	r3,r2,99b0 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    99a0:	e0fff817 	ldw	r3,-32(fp)
    99a4:	e0bffd17 	ldw	r2,-12(fp)
    99a8:	1885c83a 	sub	r2,r3,r2
    99ac:	00000606 	br	99c8 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    99b0:	e0bfff17 	ldw	r2,-4(fp)
    99b4:	1090000c 	andi	r2,r2,16384
    99b8:	10000226 	beq	r2,zero,99c4 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    99bc:	00bffd44 	movi	r2,-11
    99c0:	00000106 	br	99c8 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    99c4:	00bffec4 	movi	r2,-5
}
    99c8:	e037883a 	mov	sp,fp
    99cc:	df000017 	ldw	fp,0(sp)
    99d0:	dec00104 	addi	sp,sp,4
    99d4:	f800283a 	ret

000099d8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    99d8:	defff904 	addi	sp,sp,-28
    99dc:	df000615 	stw	fp,24(sp)
    99e0:	df000604 	addi	fp,sp,24
    99e4:	e13ffc15 	stw	r4,-16(fp)
    99e8:	e17ffd15 	stw	r5,-12(fp)
    99ec:	e1bffe15 	stw	r6,-8(fp)
    99f0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    99f4:	e0bffc17 	ldw	r2,-16(fp)
    99f8:	10800017 	ldw	r2,0(r2)
    99fc:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    9a00:	e0bffe17 	ldw	r2,-8(fp)
    9a04:	e0fffd17 	ldw	r3,-12(fp)
    9a08:	1885883a 	add	r2,r3,r2
    9a0c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    9a10:	00000e06 	br	9a4c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9a14:	e0bffa17 	ldw	r2,-24(fp)
    9a18:	10800104 	addi	r2,r2,4
    9a1c:	10800037 	ldwio	r2,0(r2)
    9a20:	10bfffec 	andhi	r2,r2,65535
    9a24:	10000926 	beq	r2,zero,9a4c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9a28:	e0fffa17 	ldw	r3,-24(fp)
    9a2c:	e0bffd17 	ldw	r2,-12(fp)
    9a30:	11000044 	addi	r4,r2,1
    9a34:	e13ffd15 	stw	r4,-12(fp)
    9a38:	10800003 	ldbu	r2,0(r2)
    9a3c:	10803fcc 	andi	r2,r2,255
    9a40:	1080201c 	xori	r2,r2,128
    9a44:	10bfe004 	addi	r2,r2,-128
    9a48:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    9a4c:	e0fffd17 	ldw	r3,-12(fp)
    9a50:	e0bffb17 	ldw	r2,-20(fp)
    9a54:	18bfef36 	bltu	r3,r2,9a14 <_gp+0xffff6b6c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9a58:	e0bffe17 	ldw	r2,-8(fp)
}
    9a5c:	e037883a 	mov	sp,fp
    9a60:	df000017 	ldw	fp,0(sp)
    9a64:	dec00104 	addi	sp,sp,4
    9a68:	f800283a 	ret

00009a6c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    9a6c:	defffa04 	addi	sp,sp,-24
    9a70:	dfc00515 	stw	ra,20(sp)
    9a74:	df000415 	stw	fp,16(sp)
    9a78:	df000404 	addi	fp,sp,16
    9a7c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9a80:	0007883a 	mov	r3,zero
    9a84:	e0bfff17 	ldw	r2,-4(fp)
    9a88:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    9a8c:	e0bfff17 	ldw	r2,-4(fp)
    9a90:	10800104 	addi	r2,r2,4
    9a94:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9a98:	0005303a 	rdctl	r2,status
    9a9c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9aa0:	e0fffd17 	ldw	r3,-12(fp)
    9aa4:	00bfff84 	movi	r2,-2
    9aa8:	1884703a 	and	r2,r3,r2
    9aac:	1001703a 	wrctl	status,r2
  
  return context;
    9ab0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    9ab4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    9ab8:	000a4200 	call	a420 <alt_tick>
    9abc:	e0bffc17 	ldw	r2,-16(fp)
    9ac0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9ac4:	e0bffe17 	ldw	r2,-8(fp)
    9ac8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    9acc:	0001883a 	nop
    9ad0:	e037883a 	mov	sp,fp
    9ad4:	dfc00117 	ldw	ra,4(sp)
    9ad8:	df000017 	ldw	fp,0(sp)
    9adc:	dec00204 	addi	sp,sp,8
    9ae0:	f800283a 	ret

00009ae4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    9ae4:	defff804 	addi	sp,sp,-32
    9ae8:	dfc00715 	stw	ra,28(sp)
    9aec:	df000615 	stw	fp,24(sp)
    9af0:	df000604 	addi	fp,sp,24
    9af4:	e13ffc15 	stw	r4,-16(fp)
    9af8:	e17ffd15 	stw	r5,-12(fp)
    9afc:	e1bffe15 	stw	r6,-8(fp)
    9b00:	e1ffff15 	stw	r7,-4(fp)
    9b04:	e0bfff17 	ldw	r2,-4(fp)
    9b08:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    9b0c:	d0a0de17 	ldw	r2,-31880(gp)
    9b10:	1000021e 	bne	r2,zero,9b1c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    9b14:	e0bffb17 	ldw	r2,-20(fp)
    9b18:	d0a0de15 	stw	r2,-31880(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    9b1c:	e0bffc17 	ldw	r2,-16(fp)
    9b20:	10800104 	addi	r2,r2,4
    9b24:	00c001c4 	movi	r3,7
    9b28:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    9b2c:	d8000015 	stw	zero,0(sp)
    9b30:	e1fffc17 	ldw	r7,-16(fp)
    9b34:	01800074 	movhi	r6,1
    9b38:	31a69b04 	addi	r6,r6,-26004
    9b3c:	e17ffe17 	ldw	r5,-8(fp)
    9b40:	e13ffd17 	ldw	r4,-12(fp)
    9b44:	00092300 	call	9230 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    9b48:	0001883a 	nop
    9b4c:	e037883a 	mov	sp,fp
    9b50:	dfc00117 	ldw	ra,4(sp)
    9b54:	df000017 	ldw	fp,0(sp)
    9b58:	dec00204 	addi	sp,sp,8
    9b5c:	f800283a 	ret

00009b60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9b60:	defffe04 	addi	sp,sp,-8
    9b64:	dfc00115 	stw	ra,4(sp)
    9b68:	df000015 	stw	fp,0(sp)
    9b6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9b70:	d0a00a17 	ldw	r2,-32728(gp)
    9b74:	10000326 	beq	r2,zero,9b84 <alt_get_errno+0x24>
    9b78:	d0a00a17 	ldw	r2,-32728(gp)
    9b7c:	103ee83a 	callr	r2
    9b80:	00000106 	br	9b88 <alt_get_errno+0x28>
    9b84:	d0a0d804 	addi	r2,gp,-31904
}
    9b88:	e037883a 	mov	sp,fp
    9b8c:	dfc00117 	ldw	ra,4(sp)
    9b90:	df000017 	ldw	fp,0(sp)
    9b94:	dec00204 	addi	sp,sp,8
    9b98:	f800283a 	ret

00009b9c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9b9c:	defffb04 	addi	sp,sp,-20
    9ba0:	dfc00415 	stw	ra,16(sp)
    9ba4:	df000315 	stw	fp,12(sp)
    9ba8:	df000304 	addi	fp,sp,12
    9bac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9bb0:	e0bfff17 	ldw	r2,-4(fp)
    9bb4:	10000816 	blt	r2,zero,9bd8 <close+0x3c>
    9bb8:	01400304 	movi	r5,12
    9bbc:	e13fff17 	ldw	r4,-4(fp)
    9bc0:	00092080 	call	9208 <__mulsi3>
    9bc4:	1007883a 	mov	r3,r2
    9bc8:	00800074 	movhi	r2,1
    9bcc:	10ab4a04 	addi	r2,r2,-21208
    9bd0:	1885883a 	add	r2,r3,r2
    9bd4:	00000106 	br	9bdc <close+0x40>
    9bd8:	0005883a 	mov	r2,zero
    9bdc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    9be0:	e0bffd17 	ldw	r2,-12(fp)
    9be4:	10001926 	beq	r2,zero,9c4c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9be8:	e0bffd17 	ldw	r2,-12(fp)
    9bec:	10800017 	ldw	r2,0(r2)
    9bf0:	10800417 	ldw	r2,16(r2)
    9bf4:	10000626 	beq	r2,zero,9c10 <close+0x74>
    9bf8:	e0bffd17 	ldw	r2,-12(fp)
    9bfc:	10800017 	ldw	r2,0(r2)
    9c00:	10800417 	ldw	r2,16(r2)
    9c04:	e13ffd17 	ldw	r4,-12(fp)
    9c08:	103ee83a 	callr	r2
    9c0c:	00000106 	br	9c14 <close+0x78>
    9c10:	0005883a 	mov	r2,zero
    9c14:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9c18:	e13fff17 	ldw	r4,-4(fp)
    9c1c:	000a3000 	call	a300 <alt_release_fd>
    if (rval < 0)
    9c20:	e0bffe17 	ldw	r2,-8(fp)
    9c24:	1000070e 	bge	r2,zero,9c44 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    9c28:	0009b600 	call	9b60 <alt_get_errno>
    9c2c:	1007883a 	mov	r3,r2
    9c30:	e0bffe17 	ldw	r2,-8(fp)
    9c34:	0085c83a 	sub	r2,zero,r2
    9c38:	18800015 	stw	r2,0(r3)
      return -1;
    9c3c:	00bfffc4 	movi	r2,-1
    9c40:	00000706 	br	9c60 <close+0xc4>
    }
    return 0;
    9c44:	0005883a 	mov	r2,zero
    9c48:	00000506 	br	9c60 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9c4c:	0009b600 	call	9b60 <alt_get_errno>
    9c50:	1007883a 	mov	r3,r2
    9c54:	00801444 	movi	r2,81
    9c58:	18800015 	stw	r2,0(r3)
    return -1;
    9c5c:	00bfffc4 	movi	r2,-1
  }
}
    9c60:	e037883a 	mov	sp,fp
    9c64:	dfc00117 	ldw	ra,4(sp)
    9c68:	df000017 	ldw	fp,0(sp)
    9c6c:	dec00204 	addi	sp,sp,8
    9c70:	f800283a 	ret

00009c74 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9c74:	deffff04 	addi	sp,sp,-4
    9c78:	df000015 	stw	fp,0(sp)
    9c7c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9c80:	0001883a 	nop
    9c84:	e037883a 	mov	sp,fp
    9c88:	df000017 	ldw	fp,0(sp)
    9c8c:	dec00104 	addi	sp,sp,4
    9c90:	f800283a 	ret

00009c94 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9c94:	defffc04 	addi	sp,sp,-16
    9c98:	df000315 	stw	fp,12(sp)
    9c9c:	df000304 	addi	fp,sp,12
    9ca0:	e13ffd15 	stw	r4,-12(fp)
    9ca4:	e17ffe15 	stw	r5,-8(fp)
    9ca8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9cac:	e0bfff17 	ldw	r2,-4(fp)
}
    9cb0:	e037883a 	mov	sp,fp
    9cb4:	df000017 	ldw	fp,0(sp)
    9cb8:	dec00104 	addi	sp,sp,4
    9cbc:	f800283a 	ret

00009cc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9cc0:	defffe04 	addi	sp,sp,-8
    9cc4:	dfc00115 	stw	ra,4(sp)
    9cc8:	df000015 	stw	fp,0(sp)
    9ccc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9cd0:	d0a00a17 	ldw	r2,-32728(gp)
    9cd4:	10000326 	beq	r2,zero,9ce4 <alt_get_errno+0x24>
    9cd8:	d0a00a17 	ldw	r2,-32728(gp)
    9cdc:	103ee83a 	callr	r2
    9ce0:	00000106 	br	9ce8 <alt_get_errno+0x28>
    9ce4:	d0a0d804 	addi	r2,gp,-31904
}
    9ce8:	e037883a 	mov	sp,fp
    9cec:	dfc00117 	ldw	ra,4(sp)
    9cf0:	df000017 	ldw	fp,0(sp)
    9cf4:	dec00204 	addi	sp,sp,8
    9cf8:	f800283a 	ret

00009cfc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9cfc:	defffa04 	addi	sp,sp,-24
    9d00:	dfc00515 	stw	ra,20(sp)
    9d04:	df000415 	stw	fp,16(sp)
    9d08:	df000404 	addi	fp,sp,16
    9d0c:	e13ffe15 	stw	r4,-8(fp)
    9d10:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9d14:	e0bffe17 	ldw	r2,-8(fp)
    9d18:	10000326 	beq	r2,zero,9d28 <alt_dev_llist_insert+0x2c>
    9d1c:	e0bffe17 	ldw	r2,-8(fp)
    9d20:	10800217 	ldw	r2,8(r2)
    9d24:	1000061e 	bne	r2,zero,9d40 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    9d28:	0009cc00 	call	9cc0 <alt_get_errno>
    9d2c:	1007883a 	mov	r3,r2
    9d30:	00800584 	movi	r2,22
    9d34:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9d38:	00bffa84 	movi	r2,-22
    9d3c:	00001306 	br	9d8c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9d40:	e0bffe17 	ldw	r2,-8(fp)
    9d44:	e0ffff17 	ldw	r3,-4(fp)
    9d48:	e0fffc15 	stw	r3,-16(fp)
    9d4c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9d50:	e0bffd17 	ldw	r2,-12(fp)
    9d54:	e0fffc17 	ldw	r3,-16(fp)
    9d58:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9d5c:	e0bffc17 	ldw	r2,-16(fp)
    9d60:	10c00017 	ldw	r3,0(r2)
    9d64:	e0bffd17 	ldw	r2,-12(fp)
    9d68:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9d6c:	e0bffc17 	ldw	r2,-16(fp)
    9d70:	10800017 	ldw	r2,0(r2)
    9d74:	e0fffd17 	ldw	r3,-12(fp)
    9d78:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9d7c:	e0bffc17 	ldw	r2,-16(fp)
    9d80:	e0fffd17 	ldw	r3,-12(fp)
    9d84:	10c00015 	stw	r3,0(r2)

  return 0;  
    9d88:	0005883a 	mov	r2,zero
}
    9d8c:	e037883a 	mov	sp,fp
    9d90:	dfc00117 	ldw	ra,4(sp)
    9d94:	df000017 	ldw	fp,0(sp)
    9d98:	dec00204 	addi	sp,sp,8
    9d9c:	f800283a 	ret

00009da0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    9da0:	defffd04 	addi	sp,sp,-12
    9da4:	dfc00215 	stw	ra,8(sp)
    9da8:	df000115 	stw	fp,4(sp)
    9dac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9db0:	00800074 	movhi	r2,1
    9db4:	10aac904 	addi	r2,r2,-21724
    9db8:	e0bfff15 	stw	r2,-4(fp)
    9dbc:	00000606 	br	9dd8 <_do_ctors+0x38>
        (*ctor) (); 
    9dc0:	e0bfff17 	ldw	r2,-4(fp)
    9dc4:	10800017 	ldw	r2,0(r2)
    9dc8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9dcc:	e0bfff17 	ldw	r2,-4(fp)
    9dd0:	10bfff04 	addi	r2,r2,-4
    9dd4:	e0bfff15 	stw	r2,-4(fp)
    9dd8:	e0ffff17 	ldw	r3,-4(fp)
    9ddc:	00800074 	movhi	r2,1
    9de0:	10aaca04 	addi	r2,r2,-21720
    9de4:	18bff62e 	bgeu	r3,r2,9dc0 <_gp+0xffff6f18>
        (*ctor) (); 
}
    9de8:	0001883a 	nop
    9dec:	e037883a 	mov	sp,fp
    9df0:	dfc00117 	ldw	ra,4(sp)
    9df4:	df000017 	ldw	fp,0(sp)
    9df8:	dec00204 	addi	sp,sp,8
    9dfc:	f800283a 	ret

00009e00 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    9e00:	defffd04 	addi	sp,sp,-12
    9e04:	dfc00215 	stw	ra,8(sp)
    9e08:	df000115 	stw	fp,4(sp)
    9e0c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9e10:	00800074 	movhi	r2,1
    9e14:	10aac904 	addi	r2,r2,-21724
    9e18:	e0bfff15 	stw	r2,-4(fp)
    9e1c:	00000606 	br	9e38 <_do_dtors+0x38>
        (*dtor) (); 
    9e20:	e0bfff17 	ldw	r2,-4(fp)
    9e24:	10800017 	ldw	r2,0(r2)
    9e28:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9e2c:	e0bfff17 	ldw	r2,-4(fp)
    9e30:	10bfff04 	addi	r2,r2,-4
    9e34:	e0bfff15 	stw	r2,-4(fp)
    9e38:	e0ffff17 	ldw	r3,-4(fp)
    9e3c:	00800074 	movhi	r2,1
    9e40:	10aaca04 	addi	r2,r2,-21720
    9e44:	18bff62e 	bgeu	r3,r2,9e20 <_gp+0xffff6f78>
        (*dtor) (); 
}
    9e48:	0001883a 	nop
    9e4c:	e037883a 	mov	sp,fp
    9e50:	dfc00117 	ldw	ra,4(sp)
    9e54:	df000017 	ldw	fp,0(sp)
    9e58:	dec00204 	addi	sp,sp,8
    9e5c:	f800283a 	ret

00009e60 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9e60:	deffff04 	addi	sp,sp,-4
    9e64:	df000015 	stw	fp,0(sp)
    9e68:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    9e6c:	0001883a 	nop
    9e70:	e037883a 	mov	sp,fp
    9e74:	df000017 	ldw	fp,0(sp)
    9e78:	dec00104 	addi	sp,sp,4
    9e7c:	f800283a 	ret

00009e80 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    9e80:	defffe04 	addi	sp,sp,-8
    9e84:	df000115 	stw	fp,4(sp)
    9e88:	df000104 	addi	fp,sp,4
    9e8c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    9e90:	e0bfff17 	ldw	r2,-4(fp)
    9e94:	10bffe84 	addi	r2,r2,-6
    9e98:	10c00428 	cmpgeui	r3,r2,16
    9e9c:	18001a1e 	bne	r3,zero,9f08 <alt_exception_cause_generated_bad_addr+0x88>
    9ea0:	100690ba 	slli	r3,r2,2
    9ea4:	00800074 	movhi	r2,1
    9ea8:	10a7ae04 	addi	r2,r2,-24904
    9eac:	1885883a 	add	r2,r3,r2
    9eb0:	10800017 	ldw	r2,0(r2)
    9eb4:	1000683a 	jmp	r2
    9eb8:	00009ef8 	rdprs	zero,zero,635
    9ebc:	00009ef8 	rdprs	zero,zero,635
    9ec0:	00009f08 	cmpgei	zero,zero,636
    9ec4:	00009f08 	cmpgei	zero,zero,636
    9ec8:	00009f08 	cmpgei	zero,zero,636
    9ecc:	00009ef8 	rdprs	zero,zero,635
    9ed0:	00009f00 	call	9f0 <__alt_mem_onchip_memory2_0-0x7610>
    9ed4:	00009f08 	cmpgei	zero,zero,636
    9ed8:	00009ef8 	rdprs	zero,zero,635
    9edc:	00009ef8 	rdprs	zero,zero,635
    9ee0:	00009f08 	cmpgei	zero,zero,636
    9ee4:	00009ef8 	rdprs	zero,zero,635
    9ee8:	00009f00 	call	9f0 <__alt_mem_onchip_memory2_0-0x7610>
    9eec:	00009f08 	cmpgei	zero,zero,636
    9ef0:	00009f08 	cmpgei	zero,zero,636
    9ef4:	00009ef8 	rdprs	zero,zero,635
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    9ef8:	00800044 	movi	r2,1
    9efc:	00000306 	br	9f0c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    9f00:	0005883a 	mov	r2,zero
    9f04:	00000106 	br	9f0c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    9f08:	0005883a 	mov	r2,zero
  }
}
    9f0c:	e037883a 	mov	sp,fp
    9f10:	df000017 	ldw	fp,0(sp)
    9f14:	dec00104 	addi	sp,sp,4
    9f18:	f800283a 	ret

00009f1c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9f1c:	defff804 	addi	sp,sp,-32
    9f20:	dfc00715 	stw	ra,28(sp)
    9f24:	df000615 	stw	fp,24(sp)
    9f28:	dc000515 	stw	r16,20(sp)
    9f2c:	df000604 	addi	fp,sp,24
    9f30:	e13ffb15 	stw	r4,-20(fp)
    9f34:	e17ffc15 	stw	r5,-16(fp)
    9f38:	e1bffd15 	stw	r6,-12(fp)
    9f3c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    9f40:	e1bffe17 	ldw	r6,-8(fp)
    9f44:	e17ffd17 	ldw	r5,-12(fp)
    9f48:	e13ffc17 	ldw	r4,-16(fp)
    9f4c:	000a1a40 	call	a1a4 <open>
    9f50:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    9f54:	e0bffa17 	ldw	r2,-24(fp)
    9f58:	10002216 	blt	r2,zero,9fe4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    9f5c:	04000074 	movhi	r16,1
    9f60:	842b4a04 	addi	r16,r16,-21208
    9f64:	e0bffa17 	ldw	r2,-24(fp)
    9f68:	01400304 	movi	r5,12
    9f6c:	1009883a 	mov	r4,r2
    9f70:	00092080 	call	9208 <__mulsi3>
    9f74:	8085883a 	add	r2,r16,r2
    9f78:	10c00017 	ldw	r3,0(r2)
    9f7c:	e0bffb17 	ldw	r2,-20(fp)
    9f80:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9f84:	04000074 	movhi	r16,1
    9f88:	842b4a04 	addi	r16,r16,-21208
    9f8c:	e0bffa17 	ldw	r2,-24(fp)
    9f90:	01400304 	movi	r5,12
    9f94:	1009883a 	mov	r4,r2
    9f98:	00092080 	call	9208 <__mulsi3>
    9f9c:	8085883a 	add	r2,r16,r2
    9fa0:	10800104 	addi	r2,r2,4
    9fa4:	10c00017 	ldw	r3,0(r2)
    9fa8:	e0bffb17 	ldw	r2,-20(fp)
    9fac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9fb0:	04000074 	movhi	r16,1
    9fb4:	842b4a04 	addi	r16,r16,-21208
    9fb8:	e0bffa17 	ldw	r2,-24(fp)
    9fbc:	01400304 	movi	r5,12
    9fc0:	1009883a 	mov	r4,r2
    9fc4:	00092080 	call	9208 <__mulsi3>
    9fc8:	8085883a 	add	r2,r16,r2
    9fcc:	10800204 	addi	r2,r2,8
    9fd0:	10c00017 	ldw	r3,0(r2)
    9fd4:	e0bffb17 	ldw	r2,-20(fp)
    9fd8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9fdc:	e13ffa17 	ldw	r4,-24(fp)
    9fe0:	000a3000 	call	a300 <alt_release_fd>
  }
} 
    9fe4:	0001883a 	nop
    9fe8:	e6ffff04 	addi	sp,fp,-4
    9fec:	dfc00217 	ldw	ra,8(sp)
    9ff0:	df000117 	ldw	fp,4(sp)
    9ff4:	dc000017 	ldw	r16,0(sp)
    9ff8:	dec00304 	addi	sp,sp,12
    9ffc:	f800283a 	ret

0000a000 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    a000:	defffb04 	addi	sp,sp,-20
    a004:	dfc00415 	stw	ra,16(sp)
    a008:	df000315 	stw	fp,12(sp)
    a00c:	df000304 	addi	fp,sp,12
    a010:	e13ffd15 	stw	r4,-12(fp)
    a014:	e17ffe15 	stw	r5,-8(fp)
    a018:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    a01c:	01c07fc4 	movi	r7,511
    a020:	01800044 	movi	r6,1
    a024:	e17ffd17 	ldw	r5,-12(fp)
    a028:	01000074 	movhi	r4,1
    a02c:	212b4d04 	addi	r4,r4,-21196
    a030:	0009f1c0 	call	9f1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    a034:	01c07fc4 	movi	r7,511
    a038:	000d883a 	mov	r6,zero
    a03c:	e17ffe17 	ldw	r5,-8(fp)
    a040:	01000074 	movhi	r4,1
    a044:	212b4a04 	addi	r4,r4,-21208
    a048:	0009f1c0 	call	9f1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    a04c:	01c07fc4 	movi	r7,511
    a050:	01800044 	movi	r6,1
    a054:	e17fff17 	ldw	r5,-4(fp)
    a058:	01000074 	movhi	r4,1
    a05c:	212b5004 	addi	r4,r4,-21184
    a060:	0009f1c0 	call	9f1c <alt_open_fd>
}  
    a064:	0001883a 	nop
    a068:	e037883a 	mov	sp,fp
    a06c:	dfc00117 	ldw	ra,4(sp)
    a070:	df000017 	ldw	fp,0(sp)
    a074:	dec00204 	addi	sp,sp,8
    a078:	f800283a 	ret

0000a07c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a07c:	defffe04 	addi	sp,sp,-8
    a080:	dfc00115 	stw	ra,4(sp)
    a084:	df000015 	stw	fp,0(sp)
    a088:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a08c:	d0a00a17 	ldw	r2,-32728(gp)
    a090:	10000326 	beq	r2,zero,a0a0 <alt_get_errno+0x24>
    a094:	d0a00a17 	ldw	r2,-32728(gp)
    a098:	103ee83a 	callr	r2
    a09c:	00000106 	br	a0a4 <alt_get_errno+0x28>
    a0a0:	d0a0d804 	addi	r2,gp,-31904
}
    a0a4:	e037883a 	mov	sp,fp
    a0a8:	dfc00117 	ldw	ra,4(sp)
    a0ac:	df000017 	ldw	fp,0(sp)
    a0b0:	dec00204 	addi	sp,sp,8
    a0b4:	f800283a 	ret

0000a0b8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    a0b8:	defffb04 	addi	sp,sp,-20
    a0bc:	dfc00415 	stw	ra,16(sp)
    a0c0:	df000315 	stw	fp,12(sp)
    a0c4:	dc000215 	stw	r16,8(sp)
    a0c8:	df000304 	addi	fp,sp,12
    a0cc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    a0d0:	e0bffe17 	ldw	r2,-8(fp)
    a0d4:	10800217 	ldw	r2,8(r2)
    a0d8:	10d00034 	orhi	r3,r2,16384
    a0dc:	e0bffe17 	ldw	r2,-8(fp)
    a0e0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a0e4:	e03ffd15 	stw	zero,-12(fp)
    a0e8:	00002306 	br	a178 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a0ec:	04000074 	movhi	r16,1
    a0f0:	842b4a04 	addi	r16,r16,-21208
    a0f4:	e0bffd17 	ldw	r2,-12(fp)
    a0f8:	01400304 	movi	r5,12
    a0fc:	1009883a 	mov	r4,r2
    a100:	00092080 	call	9208 <__mulsi3>
    a104:	8085883a 	add	r2,r16,r2
    a108:	10c00017 	ldw	r3,0(r2)
    a10c:	e0bffe17 	ldw	r2,-8(fp)
    a110:	10800017 	ldw	r2,0(r2)
    a114:	1880151e 	bne	r3,r2,a16c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a118:	04000074 	movhi	r16,1
    a11c:	842b4a04 	addi	r16,r16,-21208
    a120:	e0bffd17 	ldw	r2,-12(fp)
    a124:	01400304 	movi	r5,12
    a128:	1009883a 	mov	r4,r2
    a12c:	00092080 	call	9208 <__mulsi3>
    a130:	8085883a 	add	r2,r16,r2
    a134:	10800204 	addi	r2,r2,8
    a138:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a13c:	10000b0e 	bge	r2,zero,a16c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    a140:	01400304 	movi	r5,12
    a144:	e13ffd17 	ldw	r4,-12(fp)
    a148:	00092080 	call	9208 <__mulsi3>
    a14c:	1007883a 	mov	r3,r2
    a150:	00800074 	movhi	r2,1
    a154:	10ab4a04 	addi	r2,r2,-21208
    a158:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a15c:	e0bffe17 	ldw	r2,-8(fp)
    a160:	18800226 	beq	r3,r2,a16c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    a164:	00bffcc4 	movi	r2,-13
    a168:	00000806 	br	a18c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a16c:	e0bffd17 	ldw	r2,-12(fp)
    a170:	10800044 	addi	r2,r2,1
    a174:	e0bffd15 	stw	r2,-12(fp)
    a178:	d0a00917 	ldw	r2,-32732(gp)
    a17c:	1007883a 	mov	r3,r2
    a180:	e0bffd17 	ldw	r2,-12(fp)
    a184:	18bfd92e 	bgeu	r3,r2,a0ec <_gp+0xffff7244>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    a188:	0005883a 	mov	r2,zero
}
    a18c:	e6ffff04 	addi	sp,fp,-4
    a190:	dfc00217 	ldw	ra,8(sp)
    a194:	df000117 	ldw	fp,4(sp)
    a198:	dc000017 	ldw	r16,0(sp)
    a19c:	dec00304 	addi	sp,sp,12
    a1a0:	f800283a 	ret

0000a1a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a1a4:	defff604 	addi	sp,sp,-40
    a1a8:	dfc00915 	stw	ra,36(sp)
    a1ac:	df000815 	stw	fp,32(sp)
    a1b0:	df000804 	addi	fp,sp,32
    a1b4:	e13ffd15 	stw	r4,-12(fp)
    a1b8:	e17ffe15 	stw	r5,-8(fp)
    a1bc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    a1c0:	00bfffc4 	movi	r2,-1
    a1c4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    a1c8:	00bffb44 	movi	r2,-19
    a1cc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    a1d0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a1d4:	d1600704 	addi	r5,gp,-32740
    a1d8:	e13ffd17 	ldw	r4,-12(fp)
    a1dc:	000a54c0 	call	a54c <alt_find_dev>
    a1e0:	e0bff815 	stw	r2,-32(fp)
    a1e4:	e0bff817 	ldw	r2,-32(fp)
    a1e8:	1000051e 	bne	r2,zero,a200 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    a1ec:	e13ffd17 	ldw	r4,-12(fp)
    a1f0:	000a5dc0 	call	a5dc <alt_find_file>
    a1f4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    a1f8:	00800044 	movi	r2,1
    a1fc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    a200:	e0bff817 	ldw	r2,-32(fp)
    a204:	10002b26 	beq	r2,zero,a2b4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    a208:	e13ff817 	ldw	r4,-32(fp)
    a20c:	000a6e40 	call	a6e4 <alt_get_fd>
    a210:	e0bff915 	stw	r2,-28(fp)
    a214:	e0bff917 	ldw	r2,-28(fp)
    a218:	1000030e 	bge	r2,zero,a228 <open+0x84>
    {
      status = index;
    a21c:	e0bff917 	ldw	r2,-28(fp)
    a220:	e0bffa15 	stw	r2,-24(fp)
    a224:	00002506 	br	a2bc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    a228:	01400304 	movi	r5,12
    a22c:	e13ff917 	ldw	r4,-28(fp)
    a230:	00092080 	call	9208 <__mulsi3>
    a234:	1007883a 	mov	r3,r2
    a238:	00800074 	movhi	r2,1
    a23c:	10ab4a04 	addi	r2,r2,-21208
    a240:	1885883a 	add	r2,r3,r2
    a244:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a248:	e0fffe17 	ldw	r3,-8(fp)
    a24c:	00900034 	movhi	r2,16384
    a250:	10bfffc4 	addi	r2,r2,-1
    a254:	1886703a 	and	r3,r3,r2
    a258:	e0bffc17 	ldw	r2,-16(fp)
    a25c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    a260:	e0bffb17 	ldw	r2,-20(fp)
    a264:	1000051e 	bne	r2,zero,a27c <open+0xd8>
    a268:	e13ffc17 	ldw	r4,-16(fp)
    a26c:	000a0b80 	call	a0b8 <alt_file_locked>
    a270:	e0bffa15 	stw	r2,-24(fp)
    a274:	e0bffa17 	ldw	r2,-24(fp)
    a278:	10001016 	blt	r2,zero,a2bc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a27c:	e0bff817 	ldw	r2,-32(fp)
    a280:	10800317 	ldw	r2,12(r2)
    a284:	10000826 	beq	r2,zero,a2a8 <open+0x104>
    a288:	e0bff817 	ldw	r2,-32(fp)
    a28c:	10800317 	ldw	r2,12(r2)
    a290:	e1ffff17 	ldw	r7,-4(fp)
    a294:	e1bffe17 	ldw	r6,-8(fp)
    a298:	e17ffd17 	ldw	r5,-12(fp)
    a29c:	e13ffc17 	ldw	r4,-16(fp)
    a2a0:	103ee83a 	callr	r2
    a2a4:	00000106 	br	a2ac <open+0x108>
    a2a8:	0005883a 	mov	r2,zero
    a2ac:	e0bffa15 	stw	r2,-24(fp)
    a2b0:	00000206 	br	a2bc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    a2b4:	00bffb44 	movi	r2,-19
    a2b8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a2bc:	e0bffa17 	ldw	r2,-24(fp)
    a2c0:	1000090e 	bge	r2,zero,a2e8 <open+0x144>
  {
    alt_release_fd (index);  
    a2c4:	e13ff917 	ldw	r4,-28(fp)
    a2c8:	000a3000 	call	a300 <alt_release_fd>
    ALT_ERRNO = -status;
    a2cc:	000a07c0 	call	a07c <alt_get_errno>
    a2d0:	1007883a 	mov	r3,r2
    a2d4:	e0bffa17 	ldw	r2,-24(fp)
    a2d8:	0085c83a 	sub	r2,zero,r2
    a2dc:	18800015 	stw	r2,0(r3)
    return -1;
    a2e0:	00bfffc4 	movi	r2,-1
    a2e4:	00000106 	br	a2ec <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    a2e8:	e0bff917 	ldw	r2,-28(fp)
}
    a2ec:	e037883a 	mov	sp,fp
    a2f0:	dfc00117 	ldw	ra,4(sp)
    a2f4:	df000017 	ldw	fp,0(sp)
    a2f8:	dec00204 	addi	sp,sp,8
    a2fc:	f800283a 	ret

0000a300 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a300:	defffc04 	addi	sp,sp,-16
    a304:	dfc00315 	stw	ra,12(sp)
    a308:	df000215 	stw	fp,8(sp)
    a30c:	dc000115 	stw	r16,4(sp)
    a310:	df000204 	addi	fp,sp,8
    a314:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    a318:	e0bffe17 	ldw	r2,-8(fp)
    a31c:	108000d0 	cmplti	r2,r2,3
    a320:	1000111e 	bne	r2,zero,a368 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    a324:	04000074 	movhi	r16,1
    a328:	842b4a04 	addi	r16,r16,-21208
    a32c:	e0bffe17 	ldw	r2,-8(fp)
    a330:	01400304 	movi	r5,12
    a334:	1009883a 	mov	r4,r2
    a338:	00092080 	call	9208 <__mulsi3>
    a33c:	8085883a 	add	r2,r16,r2
    a340:	10800204 	addi	r2,r2,8
    a344:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a348:	04000074 	movhi	r16,1
    a34c:	842b4a04 	addi	r16,r16,-21208
    a350:	e0bffe17 	ldw	r2,-8(fp)
    a354:	01400304 	movi	r5,12
    a358:	1009883a 	mov	r4,r2
    a35c:	00092080 	call	9208 <__mulsi3>
    a360:	8085883a 	add	r2,r16,r2
    a364:	10000015 	stw	zero,0(r2)
  }
}
    a368:	0001883a 	nop
    a36c:	e6ffff04 	addi	sp,fp,-4
    a370:	dfc00217 	ldw	ra,8(sp)
    a374:	df000117 	ldw	fp,4(sp)
    a378:	dc000017 	ldw	r16,0(sp)
    a37c:	dec00304 	addi	sp,sp,12
    a380:	f800283a 	ret

0000a384 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a384:	defffa04 	addi	sp,sp,-24
    a388:	df000515 	stw	fp,20(sp)
    a38c:	df000504 	addi	fp,sp,20
    a390:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a394:	0005303a 	rdctl	r2,status
    a398:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a39c:	e0fffc17 	ldw	r3,-16(fp)
    a3a0:	00bfff84 	movi	r2,-2
    a3a4:	1884703a 	and	r2,r3,r2
    a3a8:	1001703a 	wrctl	status,r2
  
  return context;
    a3ac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a3b0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    a3b4:	e0bfff17 	ldw	r2,-4(fp)
    a3b8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a3bc:	e0bffd17 	ldw	r2,-12(fp)
    a3c0:	10800017 	ldw	r2,0(r2)
    a3c4:	e0fffd17 	ldw	r3,-12(fp)
    a3c8:	18c00117 	ldw	r3,4(r3)
    a3cc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    a3d0:	e0bffd17 	ldw	r2,-12(fp)
    a3d4:	10800117 	ldw	r2,4(r2)
    a3d8:	e0fffd17 	ldw	r3,-12(fp)
    a3dc:	18c00017 	ldw	r3,0(r3)
    a3e0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a3e4:	e0bffd17 	ldw	r2,-12(fp)
    a3e8:	e0fffd17 	ldw	r3,-12(fp)
    a3ec:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    a3f0:	e0bffd17 	ldw	r2,-12(fp)
    a3f4:	e0fffd17 	ldw	r3,-12(fp)
    a3f8:	10c00015 	stw	r3,0(r2)
    a3fc:	e0bffb17 	ldw	r2,-20(fp)
    a400:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a404:	e0bffe17 	ldw	r2,-8(fp)
    a408:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    a40c:	0001883a 	nop
    a410:	e037883a 	mov	sp,fp
    a414:	df000017 	ldw	fp,0(sp)
    a418:	dec00104 	addi	sp,sp,4
    a41c:	f800283a 	ret

0000a420 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a420:	defffb04 	addi	sp,sp,-20
    a424:	dfc00415 	stw	ra,16(sp)
    a428:	df000315 	stw	fp,12(sp)
    a42c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a430:	d0a00b17 	ldw	r2,-32724(gp)
    a434:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a438:	d0a0df17 	ldw	r2,-31876(gp)
    a43c:	10800044 	addi	r2,r2,1
    a440:	d0a0df15 	stw	r2,-31876(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a444:	00002e06 	br	a500 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    a448:	e0bffd17 	ldw	r2,-12(fp)
    a44c:	10800017 	ldw	r2,0(r2)
    a450:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a454:	e0bffd17 	ldw	r2,-12(fp)
    a458:	10800403 	ldbu	r2,16(r2)
    a45c:	10803fcc 	andi	r2,r2,255
    a460:	10000426 	beq	r2,zero,a474 <alt_tick+0x54>
    a464:	d0a0df17 	ldw	r2,-31876(gp)
    a468:	1000021e 	bne	r2,zero,a474 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    a46c:	e0bffd17 	ldw	r2,-12(fp)
    a470:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a474:	e0bffd17 	ldw	r2,-12(fp)
    a478:	10800217 	ldw	r2,8(r2)
    a47c:	d0e0df17 	ldw	r3,-31876(gp)
    a480:	18801d36 	bltu	r3,r2,a4f8 <alt_tick+0xd8>
    a484:	e0bffd17 	ldw	r2,-12(fp)
    a488:	10800403 	ldbu	r2,16(r2)
    a48c:	10803fcc 	andi	r2,r2,255
    a490:	1000191e 	bne	r2,zero,a4f8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    a494:	e0bffd17 	ldw	r2,-12(fp)
    a498:	10800317 	ldw	r2,12(r2)
    a49c:	e0fffd17 	ldw	r3,-12(fp)
    a4a0:	18c00517 	ldw	r3,20(r3)
    a4a4:	1809883a 	mov	r4,r3
    a4a8:	103ee83a 	callr	r2
    a4ac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    a4b0:	e0bfff17 	ldw	r2,-4(fp)
    a4b4:	1000031e 	bne	r2,zero,a4c4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    a4b8:	e13ffd17 	ldw	r4,-12(fp)
    a4bc:	000a3840 	call	a384 <alt_alarm_stop>
    a4c0:	00000d06 	br	a4f8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    a4c4:	e0bffd17 	ldw	r2,-12(fp)
    a4c8:	10c00217 	ldw	r3,8(r2)
    a4cc:	e0bfff17 	ldw	r2,-4(fp)
    a4d0:	1887883a 	add	r3,r3,r2
    a4d4:	e0bffd17 	ldw	r2,-12(fp)
    a4d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    a4dc:	e0bffd17 	ldw	r2,-12(fp)
    a4e0:	10c00217 	ldw	r3,8(r2)
    a4e4:	d0a0df17 	ldw	r2,-31876(gp)
    a4e8:	1880032e 	bgeu	r3,r2,a4f8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    a4ec:	e0bffd17 	ldw	r2,-12(fp)
    a4f0:	00c00044 	movi	r3,1
    a4f4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    a4f8:	e0bffe17 	ldw	r2,-8(fp)
    a4fc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a500:	e0fffd17 	ldw	r3,-12(fp)
    a504:	d0a00b04 	addi	r2,gp,-32724
    a508:	18bfcf1e 	bne	r3,r2,a448 <_gp+0xffff75a0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    a50c:	0001883a 	nop
}
    a510:	0001883a 	nop
    a514:	e037883a 	mov	sp,fp
    a518:	dfc00117 	ldw	ra,4(sp)
    a51c:	df000017 	ldw	fp,0(sp)
    a520:	dec00204 	addi	sp,sp,8
    a524:	f800283a 	ret

0000a528 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    a528:	deffff04 	addi	sp,sp,-4
    a52c:	df000015 	stw	fp,0(sp)
    a530:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a534:	000170fa 	wrctl	ienable,zero
}
    a538:	0001883a 	nop
    a53c:	e037883a 	mov	sp,fp
    a540:	df000017 	ldw	fp,0(sp)
    a544:	dec00104 	addi	sp,sp,4
    a548:	f800283a 	ret

0000a54c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a54c:	defffa04 	addi	sp,sp,-24
    a550:	dfc00515 	stw	ra,20(sp)
    a554:	df000415 	stw	fp,16(sp)
    a558:	df000404 	addi	fp,sp,16
    a55c:	e13ffe15 	stw	r4,-8(fp)
    a560:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a564:	e0bfff17 	ldw	r2,-4(fp)
    a568:	10800017 	ldw	r2,0(r2)
    a56c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a570:	e13ffe17 	ldw	r4,-8(fp)
    a574:	0008b280 	call	8b28 <strlen>
    a578:	10800044 	addi	r2,r2,1
    a57c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a580:	00000d06 	br	a5b8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a584:	e0bffc17 	ldw	r2,-16(fp)
    a588:	10800217 	ldw	r2,8(r2)
    a58c:	e0fffd17 	ldw	r3,-12(fp)
    a590:	180d883a 	mov	r6,r3
    a594:	e17ffe17 	ldw	r5,-8(fp)
    a598:	1009883a 	mov	r4,r2
    a59c:	000a7dc0 	call	a7dc <memcmp>
    a5a0:	1000021e 	bne	r2,zero,a5ac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a5a4:	e0bffc17 	ldw	r2,-16(fp)
    a5a8:	00000706 	br	a5c8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a5ac:	e0bffc17 	ldw	r2,-16(fp)
    a5b0:	10800017 	ldw	r2,0(r2)
    a5b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a5b8:	e0fffc17 	ldw	r3,-16(fp)
    a5bc:	e0bfff17 	ldw	r2,-4(fp)
    a5c0:	18bff01e 	bne	r3,r2,a584 <_gp+0xffff76dc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a5c4:	0005883a 	mov	r2,zero
}
    a5c8:	e037883a 	mov	sp,fp
    a5cc:	dfc00117 	ldw	ra,4(sp)
    a5d0:	df000017 	ldw	fp,0(sp)
    a5d4:	dec00204 	addi	sp,sp,8
    a5d8:	f800283a 	ret

0000a5dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    a5dc:	defffb04 	addi	sp,sp,-20
    a5e0:	dfc00415 	stw	ra,16(sp)
    a5e4:	df000315 	stw	fp,12(sp)
    a5e8:	df000304 	addi	fp,sp,12
    a5ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a5f0:	d0a00517 	ldw	r2,-32748(gp)
    a5f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a5f8:	00003106 	br	a6c0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    a5fc:	e0bffd17 	ldw	r2,-12(fp)
    a600:	10800217 	ldw	r2,8(r2)
    a604:	1009883a 	mov	r4,r2
    a608:	0008b280 	call	8b28 <strlen>
    a60c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    a610:	e0bffd17 	ldw	r2,-12(fp)
    a614:	10c00217 	ldw	r3,8(r2)
    a618:	e0bffe17 	ldw	r2,-8(fp)
    a61c:	10bfffc4 	addi	r2,r2,-1
    a620:	1885883a 	add	r2,r3,r2
    a624:	10800003 	ldbu	r2,0(r2)
    a628:	10803fcc 	andi	r2,r2,255
    a62c:	1080201c 	xori	r2,r2,128
    a630:	10bfe004 	addi	r2,r2,-128
    a634:	10800bd8 	cmpnei	r2,r2,47
    a638:	1000031e 	bne	r2,zero,a648 <alt_find_file+0x6c>
    {
      len -= 1;
    a63c:	e0bffe17 	ldw	r2,-8(fp)
    a640:	10bfffc4 	addi	r2,r2,-1
    a644:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a648:	e0bffe17 	ldw	r2,-8(fp)
    a64c:	e0ffff17 	ldw	r3,-4(fp)
    a650:	1885883a 	add	r2,r3,r2
    a654:	10800003 	ldbu	r2,0(r2)
    a658:	10803fcc 	andi	r2,r2,255
    a65c:	1080201c 	xori	r2,r2,128
    a660:	10bfe004 	addi	r2,r2,-128
    a664:	10800be0 	cmpeqi	r2,r2,47
    a668:	1000081e 	bne	r2,zero,a68c <alt_find_file+0xb0>
    a66c:	e0bffe17 	ldw	r2,-8(fp)
    a670:	e0ffff17 	ldw	r3,-4(fp)
    a674:	1885883a 	add	r2,r3,r2
    a678:	10800003 	ldbu	r2,0(r2)
    a67c:	10803fcc 	andi	r2,r2,255
    a680:	1080201c 	xori	r2,r2,128
    a684:	10bfe004 	addi	r2,r2,-128
    a688:	10000a1e 	bne	r2,zero,a6b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    a68c:	e0bffd17 	ldw	r2,-12(fp)
    a690:	10800217 	ldw	r2,8(r2)
    a694:	e0fffe17 	ldw	r3,-8(fp)
    a698:	180d883a 	mov	r6,r3
    a69c:	e17fff17 	ldw	r5,-4(fp)
    a6a0:	1009883a 	mov	r4,r2
    a6a4:	000a7dc0 	call	a7dc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a6a8:	1000021e 	bne	r2,zero,a6b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a6ac:	e0bffd17 	ldw	r2,-12(fp)
    a6b0:	00000706 	br	a6d0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    a6b4:	e0bffd17 	ldw	r2,-12(fp)
    a6b8:	10800017 	ldw	r2,0(r2)
    a6bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a6c0:	e0fffd17 	ldw	r3,-12(fp)
    a6c4:	d0a00504 	addi	r2,gp,-32748
    a6c8:	18bfcc1e 	bne	r3,r2,a5fc <_gp+0xffff7754>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a6cc:	0005883a 	mov	r2,zero
}
    a6d0:	e037883a 	mov	sp,fp
    a6d4:	dfc00117 	ldw	ra,4(sp)
    a6d8:	df000017 	ldw	fp,0(sp)
    a6dc:	dec00204 	addi	sp,sp,8
    a6e0:	f800283a 	ret

0000a6e4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a6e4:	defffa04 	addi	sp,sp,-24
    a6e8:	dfc00515 	stw	ra,20(sp)
    a6ec:	df000415 	stw	fp,16(sp)
    a6f0:	dc000315 	stw	r16,12(sp)
    a6f4:	df000404 	addi	fp,sp,16
    a6f8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    a6fc:	00bffa04 	movi	r2,-24
    a700:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a704:	e03ffc15 	stw	zero,-16(fp)
    a708:	00001d06 	br	a780 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    a70c:	04000074 	movhi	r16,1
    a710:	842b4a04 	addi	r16,r16,-21208
    a714:	e0bffc17 	ldw	r2,-16(fp)
    a718:	01400304 	movi	r5,12
    a71c:	1009883a 	mov	r4,r2
    a720:	00092080 	call	9208 <__mulsi3>
    a724:	8085883a 	add	r2,r16,r2
    a728:	10800017 	ldw	r2,0(r2)
    a72c:	1000111e 	bne	r2,zero,a774 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    a730:	04000074 	movhi	r16,1
    a734:	842b4a04 	addi	r16,r16,-21208
    a738:	e0bffc17 	ldw	r2,-16(fp)
    a73c:	01400304 	movi	r5,12
    a740:	1009883a 	mov	r4,r2
    a744:	00092080 	call	9208 <__mulsi3>
    a748:	8085883a 	add	r2,r16,r2
    a74c:	e0fffe17 	ldw	r3,-8(fp)
    a750:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    a754:	d0e00917 	ldw	r3,-32732(gp)
    a758:	e0bffc17 	ldw	r2,-16(fp)
    a75c:	1880020e 	bge	r3,r2,a768 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    a760:	e0bffc17 	ldw	r2,-16(fp)
    a764:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
    a768:	e0bffc17 	ldw	r2,-16(fp)
    a76c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    a770:	00000606 	br	a78c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a774:	e0bffc17 	ldw	r2,-16(fp)
    a778:	10800044 	addi	r2,r2,1
    a77c:	e0bffc15 	stw	r2,-16(fp)
    a780:	e0bffc17 	ldw	r2,-16(fp)
    a784:	10800810 	cmplti	r2,r2,32
    a788:	103fe01e 	bne	r2,zero,a70c <_gp+0xffff7864>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a78c:	e0bffd17 	ldw	r2,-12(fp)
}
    a790:	e6ffff04 	addi	sp,fp,-4
    a794:	dfc00217 	ldw	ra,8(sp)
    a798:	df000117 	ldw	fp,4(sp)
    a79c:	dc000017 	ldw	r16,0(sp)
    a7a0:	dec00304 	addi	sp,sp,12
    a7a4:	f800283a 	ret

0000a7a8 <atexit>:
    a7a8:	200b883a 	mov	r5,r4
    a7ac:	000f883a 	mov	r7,zero
    a7b0:	000d883a 	mov	r6,zero
    a7b4:	0009883a 	mov	r4,zero
    a7b8:	000a80c1 	jmpi	a80c <__register_exitproc>

0000a7bc <exit>:
    a7bc:	defffe04 	addi	sp,sp,-8
    a7c0:	000b883a 	mov	r5,zero
    a7c4:	dc000015 	stw	r16,0(sp)
    a7c8:	dfc00115 	stw	ra,4(sp)
    a7cc:	2021883a 	mov	r16,r4
    a7d0:	000a9640 	call	a964 <__call_exitprocs>
    a7d4:	8009883a 	mov	r4,r16
    a7d8:	000aaf40 	call	aaf4 <_exit>

0000a7dc <memcmp>:
    a7dc:	218d883a 	add	r6,r4,r6
    a7e0:	21800826 	beq	r4,r6,a804 <memcmp+0x28>
    a7e4:	20800003 	ldbu	r2,0(r4)
    a7e8:	28c00003 	ldbu	r3,0(r5)
    a7ec:	10c00226 	beq	r2,r3,a7f8 <memcmp+0x1c>
    a7f0:	10c5c83a 	sub	r2,r2,r3
    a7f4:	f800283a 	ret
    a7f8:	21000044 	addi	r4,r4,1
    a7fc:	29400044 	addi	r5,r5,1
    a800:	003ff706 	br	a7e0 <_gp+0xffff7938>
    a804:	0005883a 	mov	r2,zero
    a808:	f800283a 	ret

0000a80c <__register_exitproc>:
    a80c:	00800074 	movhi	r2,1
    a810:	10abac04 	addi	r2,r2,-20816
    a814:	10c00017 	ldw	r3,0(r2)
    a818:	defff904 	addi	sp,sp,-28
    a81c:	dc000015 	stw	r16,0(sp)
    a820:	1c000c17 	ldw	r16,48(r3)
    a824:	dd400515 	stw	r21,20(sp)
    a828:	dd000415 	stw	r20,16(sp)
    a82c:	dcc00315 	stw	r19,12(sp)
    a830:	dc800215 	stw	r18,8(sp)
    a834:	dc400115 	stw	r17,4(sp)
    a838:	dfc00615 	stw	ra,24(sp)
    a83c:	202b883a 	mov	r21,r4
    a840:	2823883a 	mov	r17,r5
    a844:	3027883a 	mov	r19,r6
    a848:	3825883a 	mov	r18,r7
    a84c:	1029883a 	mov	r20,r2
    a850:	8000021e 	bne	r16,zero,a85c <__register_exitproc+0x50>
    a854:	1c000d04 	addi	r16,r3,52
    a858:	1c000c15 	stw	r16,48(r3)
    a85c:	80800117 	ldw	r2,4(r16)
    a860:	00c007c4 	movi	r3,31
    a864:	1880110e 	bge	r3,r2,a8ac <__register_exitproc+0xa0>
    a868:	00800034 	movhi	r2,0
    a86c:	10800004 	addi	r2,r2,0
    a870:	1000021e 	bne	r2,zero,a87c <__register_exitproc+0x70>
    a874:	00bfffc4 	movi	r2,-1
    a878:	00003106 	br	a940 <__register_exitproc+0x134>
    a87c:	01002304 	movi	r4,140
    a880:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a884:	1021883a 	mov	r16,r2
    a888:	103ffa26 	beq	r2,zero,a874 <_gp+0xffff79cc>
    a88c:	10000115 	stw	zero,4(r2)
    a890:	a0800017 	ldw	r2,0(r20)
    a894:	10c00c17 	ldw	r3,48(r2)
    a898:	80c00015 	stw	r3,0(r16)
    a89c:	14000c15 	stw	r16,48(r2)
    a8a0:	80002215 	stw	zero,136(r16)
    a8a4:	a8001d26 	beq	r21,zero,a91c <__register_exitproc+0x110>
    a8a8:	00000606 	br	a8c4 <__register_exitproc+0xb8>
    a8ac:	a8001b26 	beq	r21,zero,a91c <__register_exitproc+0x110>
    a8b0:	80802217 	ldw	r2,136(r16)
    a8b4:	1000091e 	bne	r2,zero,a8dc <__register_exitproc+0xd0>
    a8b8:	00800034 	movhi	r2,0
    a8bc:	10800004 	addi	r2,r2,0
    a8c0:	103fec26 	beq	r2,zero,a874 <_gp+0xffff79cc>
    a8c4:	01004204 	movi	r4,264
    a8c8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a8cc:	103fe926 	beq	r2,zero,a874 <_gp+0xffff79cc>
    a8d0:	10004015 	stw	zero,256(r2)
    a8d4:	10004115 	stw	zero,260(r2)
    a8d8:	80802215 	stw	r2,136(r16)
    a8dc:	81400117 	ldw	r5,4(r16)
    a8e0:	01000044 	movi	r4,1
    a8e4:	2947883a 	add	r3,r5,r5
    a8e8:	18c7883a 	add	r3,r3,r3
    a8ec:	10c7883a 	add	r3,r2,r3
    a8f0:	1cc00015 	stw	r19,0(r3)
    a8f4:	2148983a 	sll	r4,r4,r5
    a8f8:	11404017 	ldw	r5,256(r2)
    a8fc:	290ab03a 	or	r5,r5,r4
    a900:	11404015 	stw	r5,256(r2)
    a904:	1c802015 	stw	r18,128(r3)
    a908:	00c00084 	movi	r3,2
    a90c:	a8c0031e 	bne	r21,r3,a91c <__register_exitproc+0x110>
    a910:	10c04117 	ldw	r3,260(r2)
    a914:	1908b03a 	or	r4,r3,r4
    a918:	11004115 	stw	r4,260(r2)
    a91c:	80800117 	ldw	r2,4(r16)
    a920:	10c00044 	addi	r3,r2,1
    a924:	10800084 	addi	r2,r2,2
    a928:	1085883a 	add	r2,r2,r2
    a92c:	1085883a 	add	r2,r2,r2
    a930:	80c00115 	stw	r3,4(r16)
    a934:	80a1883a 	add	r16,r16,r2
    a938:	84400015 	stw	r17,0(r16)
    a93c:	0005883a 	mov	r2,zero
    a940:	dfc00617 	ldw	ra,24(sp)
    a944:	dd400517 	ldw	r21,20(sp)
    a948:	dd000417 	ldw	r20,16(sp)
    a94c:	dcc00317 	ldw	r19,12(sp)
    a950:	dc800217 	ldw	r18,8(sp)
    a954:	dc400117 	ldw	r17,4(sp)
    a958:	dc000017 	ldw	r16,0(sp)
    a95c:	dec00704 	addi	sp,sp,28
    a960:	f800283a 	ret

0000a964 <__call_exitprocs>:
    a964:	defff504 	addi	sp,sp,-44
    a968:	dd000515 	stw	r20,20(sp)
    a96c:	05000074 	movhi	r20,1
    a970:	dc800315 	stw	r18,12(sp)
    a974:	dfc00a15 	stw	ra,40(sp)
    a978:	df000915 	stw	fp,36(sp)
    a97c:	ddc00815 	stw	r23,32(sp)
    a980:	dd800715 	stw	r22,28(sp)
    a984:	dd400615 	stw	r21,24(sp)
    a988:	dcc00415 	stw	r19,16(sp)
    a98c:	dc400215 	stw	r17,8(sp)
    a990:	dc000115 	stw	r16,4(sp)
    a994:	d9000015 	stw	r4,0(sp)
    a998:	2825883a 	mov	r18,r5
    a99c:	a52bac04 	addi	r20,r20,-20816
    a9a0:	a4400017 	ldw	r17,0(r20)
    a9a4:	8cc00c17 	ldw	r19,48(r17)
    a9a8:	8c400c04 	addi	r17,r17,48
    a9ac:	98004526 	beq	r19,zero,aac4 <__call_exitprocs+0x160>
    a9b0:	9c000117 	ldw	r16,4(r19)
    a9b4:	00900034 	movhi	r2,16384
    a9b8:	10bfffc4 	addi	r2,r2,-1
    a9bc:	9d402217 	ldw	r21,136(r19)
    a9c0:	85bfffc4 	addi	r22,r16,-1
    a9c4:	80a1883a 	add	r16,r16,r2
    a9c8:	8421883a 	add	r16,r16,r16
    a9cc:	8421883a 	add	r16,r16,r16
    a9d0:	ac2f883a 	add	r23,r21,r16
    a9d4:	84000204 	addi	r16,r16,8
    a9d8:	9c21883a 	add	r16,r19,r16
    a9dc:	b0002716 	blt	r22,zero,aa7c <__call_exitprocs+0x118>
    a9e0:	90000726 	beq	r18,zero,aa00 <__call_exitprocs+0x9c>
    a9e4:	a800041e 	bne	r21,zero,a9f8 <__call_exitprocs+0x94>
    a9e8:	b5bfffc4 	addi	r22,r22,-1
    a9ec:	bdffff04 	addi	r23,r23,-4
    a9f0:	843fff04 	addi	r16,r16,-4
    a9f4:	003ff906 	br	a9dc <_gp+0xffff7b34>
    a9f8:	b9002017 	ldw	r4,128(r23)
    a9fc:	913ffa1e 	bne	r18,r4,a9e8 <_gp+0xffff7b40>
    aa00:	99000117 	ldw	r4,4(r19)
    aa04:	82000017 	ldw	r8,0(r16)
    aa08:	213fffc4 	addi	r4,r4,-1
    aa0c:	b100021e 	bne	r22,r4,aa18 <__call_exitprocs+0xb4>
    aa10:	9d800115 	stw	r22,4(r19)
    aa14:	00000106 	br	aa1c <__call_exitprocs+0xb8>
    aa18:	80000015 	stw	zero,0(r16)
    aa1c:	403ff226 	beq	r8,zero,a9e8 <_gp+0xffff7b40>
    aa20:	9f000117 	ldw	fp,4(r19)
    aa24:	a8000526 	beq	r21,zero,aa3c <__call_exitprocs+0xd8>
    aa28:	00800044 	movi	r2,1
    aa2c:	1592983a 	sll	r9,r2,r22
    aa30:	a9404017 	ldw	r5,256(r21)
    aa34:	494a703a 	and	r5,r9,r5
    aa38:	2800021e 	bne	r5,zero,aa44 <__call_exitprocs+0xe0>
    aa3c:	403ee83a 	callr	r8
    aa40:	00000906 	br	aa68 <__call_exitprocs+0x104>
    aa44:	a9004117 	ldw	r4,260(r21)
    aa48:	4908703a 	and	r4,r9,r4
    aa4c:	2000041e 	bne	r4,zero,aa60 <__call_exitprocs+0xfc>
    aa50:	b9400017 	ldw	r5,0(r23)
    aa54:	d9000017 	ldw	r4,0(sp)
    aa58:	403ee83a 	callr	r8
    aa5c:	00000206 	br	aa68 <__call_exitprocs+0x104>
    aa60:	b9000017 	ldw	r4,0(r23)
    aa64:	403ee83a 	callr	r8
    aa68:	99000117 	ldw	r4,4(r19)
    aa6c:	e13fcc1e 	bne	fp,r4,a9a0 <_gp+0xffff7af8>
    aa70:	89000017 	ldw	r4,0(r17)
    aa74:	993fdc26 	beq	r19,r4,a9e8 <_gp+0xffff7b40>
    aa78:	003fc906 	br	a9a0 <_gp+0xffff7af8>
    aa7c:	00800034 	movhi	r2,0
    aa80:	10800004 	addi	r2,r2,0
    aa84:	10000f26 	beq	r2,zero,aac4 <__call_exitprocs+0x160>
    aa88:	99400117 	ldw	r5,4(r19)
    aa8c:	99000017 	ldw	r4,0(r19)
    aa90:	2800091e 	bne	r5,zero,aab8 <__call_exitprocs+0x154>
    aa94:	20000826 	beq	r4,zero,aab8 <__call_exitprocs+0x154>
    aa98:	89000015 	stw	r4,0(r17)
    aa9c:	a8000226 	beq	r21,zero,aaa8 <__call_exitprocs+0x144>
    aaa0:	a809883a 	mov	r4,r21
    aaa4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    aaa8:	9809883a 	mov	r4,r19
    aaac:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    aab0:	8cc00017 	ldw	r19,0(r17)
    aab4:	003fbd06 	br	a9ac <_gp+0xffff7b04>
    aab8:	9823883a 	mov	r17,r19
    aabc:	2027883a 	mov	r19,r4
    aac0:	003fba06 	br	a9ac <_gp+0xffff7b04>
    aac4:	dfc00a17 	ldw	ra,40(sp)
    aac8:	df000917 	ldw	fp,36(sp)
    aacc:	ddc00817 	ldw	r23,32(sp)
    aad0:	dd800717 	ldw	r22,28(sp)
    aad4:	dd400617 	ldw	r21,24(sp)
    aad8:	dd000517 	ldw	r20,20(sp)
    aadc:	dcc00417 	ldw	r19,16(sp)
    aae0:	dc800317 	ldw	r18,12(sp)
    aae4:	dc400217 	ldw	r17,8(sp)
    aae8:	dc000117 	ldw	r16,4(sp)
    aaec:	dec00b04 	addi	sp,sp,44
    aaf0:	f800283a 	ret

0000aaf4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    aaf4:	defffd04 	addi	sp,sp,-12
    aaf8:	df000215 	stw	fp,8(sp)
    aafc:	df000204 	addi	fp,sp,8
    ab00:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    ab04:	0001883a 	nop
    ab08:	e0bfff17 	ldw	r2,-4(fp)
    ab0c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    ab10:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    ab14:	10000226 	beq	r2,zero,ab20 <_exit+0x2c>
    ALT_SIM_FAIL();
    ab18:	002af070 	cmpltui	zero,zero,43969
    ab1c:	00000106 	br	ab24 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    ab20:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    ab24:	003fff06 	br	ab24 <_gp+0xffff7c7c>
